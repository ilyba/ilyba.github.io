<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="fr"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="fr" /><updated>2025-03-23T18:54:27+00:00</updated><id>/feed.xml</id><title type="html">ILYBA</title><subtitle>Développement d&apos;applications Web et mobile</subtitle><entry><title type="html">Améliorer la qualité du code de vos applications Web</title><link href="/ruby/rails/architecture/2025/03/10/am%C3%A9liorer-la-qualit%C3%A9-de-vos-applications-web.html" rel="alternate" type="text/html" title="Améliorer la qualité du code de vos applications Web" /><published>2025-03-10T07:00:00+00:00</published><updated>2025-03-10T07:00:00+00:00</updated><id>/ruby/rails/architecture/2025/03/10/am%C3%A9liorer-la-qualit%C3%A9-de-vos-applications-web</id><content type="html" xml:base="/ruby/rails/architecture/2025/03/10/am%C3%A9liorer-la-qualit%C3%A9-de-vos-applications-web.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Durant ma carrière de développeur Web, j’ai eu l’occasion de travailler sur de nombreuses applications Web différentes. Jai pu observer comment l’organisation d’une équipe affecte la qualité du code produit et comment cette dernière influence la stabilité d’une application.</p>

<h1 id="limportance-du-facteur-humain">L’importance du facteur humain</h1>

<p>Les problématiques que va rencontrer une équipe composée pratiquement exclusivement de développeurs expérimentés ne seront pas les mêmes que ceux qu’une équipe de jeunes développeurs.</p>

<p>Les débutants vont avoir tendance à produire du code peu structuré et passant à côté des bonnes pratiques. Faute de connaître les outils les mieux adaptés, ils vont avoir tendance à en utiliser de peu appropriés. Et faute d’expérience, ils vont avoir tendance à privilégier des solutions incomplètes.</p>

<p>Avec l’expérience, les développeurs vont commencer à gagner en confiance et vont parfois développer des solutions inutilement complexes en utilisant par exemple trop de couches d’abstractions, ou en utilisant des patrons de conception inadaptés.</p>

<p>Finalement, les développeurs les plus expérimentés auront parfois tendance à poser des problèmes d’organisation. Grâce à leur expérience accumulée, ils ont des compétences élevés pour résoudre des problèmes divers. Mais cela peut parfois causer des conflits au moment de choisir une solution technique.</p>

<p>L’ensemble de ces problématiques peut affecter la qualité du code d’une application.</p>

<h1 id="la-structure-du-code-affecte-la-qualité-dune-application">La structure du code affecte la qualité d’une application</h1>

<p>Dans une application, le concept de “structure du code” est en réalité plutôt vague et peux représenter plusieurs concepts. En voici quelques exemples :</p>

<ul>
  <li>L’organisation des fichiers (leur nom et leur emplacement sur le système de fichiers)</li>
  <li>La manière d’organiser le code dans un fichier (l’ordre des objets de code, leur longueur)</li>
  <li>La manière dont les objets de code interagissent ou sont encapsulés…</li>
</ul>

<p>La liste n’est pas exhaustive. Je vais me concentrer dans cet article sur l’organisation des fichiers, mais les problématiques et les conséquences sont similaires pour les autres aspects d’organisation du code. En réalité, chacun de ces aspects a un impact sur la qualité de la structure d’une application.</p>

<h2 id="lorganisation-des-fichiers">L’organisation des fichiers</h2>

<p>Les fichiers représentants le code et qui, en Ruby contiendront le plus souvent des modules ou des classes. L’utilisation de frameworks comme Rails permet de simplifier cet aspect car une hiérarchisation des fichier de base est prévue avec un dossier <code class="language-plaintext highlighter-rouge">config</code> pour la configuration, des dossiers <code class="language-plaintext highlighter-rouge">models</code> , <code class="language-plaintext highlighter-rouge">views</code> et <code class="language-plaintext highlighter-rouge">controllers</code> pour la logique MVC, etc.</p>

<p>Pour une application simple, cette hiérarchie est amplement suffisante pour organiser les fichiers. Mais au fur et à mesure que la complexité d’une application augmente, on a de plus en plus de fichiers et ils sont de plus en plus volumineux.</p>

<p>Rails propose le concept de “concerns” (module représentant un aspect d’un objet) pour extraire des fonctionnalités dans des modules qui seront ensuite composés entre eux pour former une entité plus importante. Dit plus simplement, on va éclater le code d’un fichier dans plusieurs fichiers.</p>

<p>C’est souvent là que les problèmes commencent. Car il faut choisir comment faire le découpage : quelles méthodes, macros vont aller dans quels fichiers, en suivant quelle logique. Il faut aussi décider du nom des nouveaux fichiers. Il faut aussi se demander si plutôt que d’accumuler différents modules de <code class="language-plaintext highlighter-rouge">concerns</code>, il ne serait pas plus pertinent de modifier l’architecture du code en introduisant un nouveau concept, une nouvelle classe.</p>

<p>Et à ces questions, il n’existe pas une réponse unique et idéale. Chaque choix aura ses avantages et ses inconvénients. Certains choix auront des conséquences importantes et il sera opportun de les étudier précisément alors que d’autres seront sans importance et une décision arbitraire sera tout à fait satisfaisante. Mais il n’est pas toujours évident d’anticiper l’avenir pour savoir identifier les décisions seront importantes.</p>

<p>Analysons quelques problèmes de structure et leurs conséquences.</p>

<h2 id="quelques-problèmes-de-structure">Quelques problèmes de structure</h2>

<p>Le problème le plus évident est l’utilisation de noms peu adaptés pour les fichiers, classes, modules.</p>

<p>Le non respect des conventions pour les nommer (utilisation de conventions différentes de celle du projet ou de celles en vigueur dans la communauté). Par exemple, en Ruby les nom des classes et des modules utilisent CamelCase. Le respect de cette convention partagée dans la communauté Ruby facilite considérablement, la lecture, l’écriture du code et la navigation dans le code. Son non respect n’a pas de grave conséquence, mais cela rendra le travail sur la base de code plus fastidieux. Et il faut prendre en compte que la qualité d’écriture du code n’est jamais idéal dans une application qui contient plusieurs milliers de lignes de code. C’est un problème qui s’ajoutera donc automatiquement à d’autres alors qu’il est très simple à éviter.</p>

<p>Parfois, le choix du nom d’un fichier, d’un objet, d’une méthode, d’une variable peut être fait trop rapidement. C’est un problème assez fréquent car au cours du développement, on passe son temps à créer et donc nommer des objets. Il peut être tentant de de nommer rapidement un objet pour passer à la suite de sa réflection. Mais un mauvais choix de nom peut avoir de graves répercussions. Il va compliquer la lecture et la compréhension du code. Une mauvaise compréhension d’un nom peut entrainer rapidement des bugs importants dans une application. Un objet ne fonctionnant pas comme son nom l’indique peut être mal utilisé par exemple, et le bug ne sera pas toujours évident à détecter.</p>

<p>Lors du découpage d’un objet en plusieurs partie, les problèmes peuvent vite se cumuler :</p>

<p>On peut par facilité ou par négligence utiliser une notion technique alors qu’une notion métier serait plus pertinente. Par exemple, on va mettre les définition d’associations dans un fichier, les validations dans un autre. On va extraire tous les callbacks, les filtres, etc. Généralement il est plus pertinent d’identifier des aspects et de regrouper dans un fichier tout ce qui concerne cet aspect donné (un module la facturation, un autre pour la gestion du processus, encore un pour les adresses, un pour les données du client, etc.). Ce type de problème sera gênant à la lecture mais va aussi complexifier les modifications du code qui s’étaleront alors sur plusieurs fichiers.</p>

<p>On peut aussi introduire inutilement des abstractions et des objets intermédiaires. Cela va causer des indirections, et pour suivre le cheminement du code, il faudra naviguer dans plusieurs fichiers au risque de se perdre. La lecture sera plus complexe, et il sera aussi dans certains cas plus difficile de modifier le code correspondant.</p>

<p>Les problèmes de structure peuvent parfois être plus profonds. On peut utiliser des logiques complexes et technique qui va complexifier l’utilisation du code. Par exemple, en utilisant un dossier <code class="language-plaintext highlighter-rouge">services</code> ou <code class="language-plaintext highlighter-rouge">operations</code> en plus du dossier <code class="language-plaintext highlighter-rouge">models</code> et en mettant la logique métier dans les deux dossiers. La création de tels dossiers n’est pas un problème en soi mais le reste de la base de code doit être cohérent. Autrement, encore une fois le code sera plus difficile à lire et à modifier. Lorsque de mauvaises pratiques sont ancrées profondément dans le code, remettre le code en ordre peut être extrêmement long et difficile.</p>

<p>De la même manière mettre de la logique métier dans les helpers, les vues ou les contrôleurs pose le même type de problème. Le fait de regrouper toute la logique métier d’un concept au même endroit est essentiel pour qu’une application puisse être facilement maintenue.</p>

<h1 id="limportance-de-suivre-les-bonnes-pratiques">L’importance de suivre les bonnes pratiques</h1>

<p>Nous avons vu comment les problèmes de structure peuvent influer sur la qualité du code et causer des bugs. Le suivi des bonnes pratiques au quotidien est également important.</p>

<h2 id="lutilisation-et-le-respect-du-linter">L’utilisation et le respect du linter</h2>

<p>La majorité des bonnes pratiques peuvent êtres simplement respectées en utilisant un linter (outil d’analyse de code).</p>

<p>Pour ruby, rubocop est conseillé. Personnellement, l’active toutes les politiques et j’utilise autant que possible les paramètres par défaut.</p>

<p>Au départ, cela peut paraitre fastidieux et vain de respecter certaines des contraintes (méthodes de 10 lignes maximum, longueur de ligne limitée, nombre le ligne maximum d’un module, etc). Du coup, les développeurs sont souvent tentés de considérer que le non respect de la règle est justifié dans leur cas. Parmi les excuses les plus fréquentes :</p>

<ul>
  <li>Le code est quand même suffisamment lisible</li>
  <li>Ça ne dérange personne</li>
  <li>Il n’y a pas de bug dans ce cas</li>
  <li>Il n’y a pas de problème de sécurité dans ce cas</li>
  <li>Ne pas respecter la règle a un avantage significatif ici</li>
  <li>etc.</li>
</ul>

<p>À mon avis, il est souvent plus important que la règle soit appliquée de manière homogène. En effet, même si le non respect de la règle n’est pas un problème, il est souvent tout de même possible de la respecter. La plupart du temps, le code est meilleur après modification. Dans certains cas, il arrive qu’il soit effectivement moins bon. Même dans ces cas, la plupart du temps, le code est un peu moins bon (peut-être un peu moins lisible par exemple), mais c’est compensé par plusieurs avantages :</p>

<ul>
  <li>Une exception au respect d’une règle pourra inciter d’autres développeurs à ne pas la respecter (ou même à ne pas respecter en général les règles du linter). Cela aura pour conséquence un code moins homogène au mieux, et au pire causera des bugs dans l’application, des problèmes de lisibilité, etc. Éviter cela est un avantage certain.</li>
  <li>Le code sera globalement plus homogène et donc plus confortable à lire, même si cela se fait ponctuellement au prix d’un code parfois un peu moins lisible.</li>
</ul>

<p>Pour ces raisons, l’utilisation d’un linter et son respect participent grandement à la qualité du code.</p>

<p>Naturellement, dans certains cas, on préfèrera modifier les paramètres du linter, que ce soit par préférence ou parce qu’une règle spécifique n’apporte pas de bénéfice suffisant au vu de la contrainte.</p>

<h2 id="les-autres-bonnes-pratiques">Les autres bonnes pratiques</h2>

<p>Les autres bonnes pratiques sont importantes à suivre. Un développeur expérimenté en connaitre et en maitrisera plus qu’un développeur débutant.</p>

<p>C’est pour cela que la relecture du code par un développeur plus expérimenté est important pour garantir une bonne qualité du code.</p>

<p>Les bonnes pratiques les plus importantes pour moi sont :</p>

<ul>
  <li>SRP - Single Responsibility Principle : Le principe de responsabilité unique. Chaque objet de code doit se concentrer sur un seul aspect à la fois.</li>
  <li>KISS - Keep It Simple and Stupid : Garder le code simple et stupide. C’est à dire qu’une solution simple et directe sera préférable à une solution complexe.</li>
  <li>YAGNI - You Are not Gonna Need It : Tu n’en n’auras pas besoin. C’est un peu le pendant de KISS, si une fonctionnalité ou une abstraction, gérer de manière complexe une erreur qui n’arrivera pas, n’est pas nécessaire maintenant, il est inutile de la développer avant d’en avoir réellement le besoin.</li>
</ul>

<p>Ces bonnes pratiques entrent parfois en contradiction les unes avec les autres, et il faut alors choisir laquelle privilégier.</p>

<p>Le respect des bonnes pratiques impacte énormément la qualité du code :</p>

<ul>
  <li>Ici aussi, la lecture du code sera plus facile</li>
  <li>La quantité de code produite sera aussi réduire que possible, ce qui apportera des avantages en terme de productivité.</li>
  <li>L’évolution du code en est facilitée car le code aura le bon niveau de complexité.</li>
  <li>La maintenance est plus facile en raison de la simplicité et de la densité du code, et de la limitation des embranchements.</li>
  <li>Pour les mêmes raisons, cela limitera le nombre de bugs.</li>
</ul>

<h1 id="bien-choisir-ses-outils">Bien choisir ses outils</h1>

<p>Un bon choix d’outil est également important pour la qualité du code. Le choix doit toujours se faire en fonction du contexte particulier de votre application. Un bon outil dans une application ne l’est pas forcément dans une autre.</p>

<p>Voici quelques critères importants pour choisir un outil :</p>

<ul>
  <li>L’organisation et le niveau général de l’équipe. Un outil pourra être adapté à une organisation particulière et pourra être efficace avec des développeurs d’une certaine expérience. Mais il pourra être en revanche contre productif dans une autre organisation. Par exemple pour des besoins simples avec une équipe peu expérimentée, il faudra privilégier des outils simples même si peu performants à des outils complexes et avec une utilisation peu intuitive.</li>
  <li>La maintenance et la popularité : il sera souvent préférable de choisir un outil bien maintenu et populaire plutôt qu’un outil parfaitement adapté mais peu connu et peu maintenu. Bien entendu il sera tout à fait envisageable de porter son choix sur un outil extrêmement adapté et peu populaire à condition d’être prêt à le modifier soi-même pour l’adapter ou corriger des problèmes.</li>
  <li>La licence : c’est un aspect souvent négligé, mais vérifier les licences des outils utilisés est un critère important pour éviter tout problème juridique, en particulier si votre application devient populaire.</li>
</ul>

<h1 id="évitons-de-prendre-trop-de-raccourcis">Évitons de prendre trop de raccourcis</h1>

<p>Une erreur fréquente dans le développement de fonctionnalités complexe et d’appliquer un peu trop grossièrement le principe KISS.</p>

<p>Il est évidemment essentiel de conserver un code simple, mais il est tout aussi important d’anticiper l’utilisation d’une fonctionnalité.</p>

<p>Dans la pratique, les développeurs doivent réaliser une fonctionnalité en répondant à un cahier des charges qui prend généralement la forme d’un document de spécification.</p>

<p>Dans les entreprises où j’ai travaillé, on utilise des méthodes dites “agile”. En pratique, cela signifie qu’on souhaite diminuer autant que possible le temps entre la spécification d’une idée et sa livraison, quitte à revenir dessus régulièrement si le besoin réel ne correspond pas exactement au besoin exprimé.</p>

<p>La conséquence est que malgré le soin apporté à la rédaction des spécifications. Il y a souvent de nombreux trous. Personnellement, je choisis souvent de concentrer l’effort de spécification sur le besoin principal. Cela se fait souvent au détriment de spécification technique détaillées ou des cas d’utilisation secondaire. Ces aspects sont alors laissés à la responsabilité de la suite de la chaîne de développement, c’est à dire : le développeur de la fonctionnalité, le développeur assigné à la relecture et l’équipe d’assurance qualité.</p>

<p>Un développeur peut alors facilement négliger la prise en compte des cas d’erreur par exemple ou ne pas anticiper des cas d’utilisation alternatif et livrer une fonctionnalité en pratique.</p>

<p>Bien entendu, il serait tout à fait possible de limiter ces inconvénients avec des spécifications techniques plus détaillées, mais cela augmenterait significativement le temps nécessaire pour analyser le code, les besoins, l’utilisation et la rédaction. Le temps passé à rédiger augmenterait, et la capacité à exprimer les besoins en spécification, et donc la capacité de développement diminuerait. Et cela ne garantirait pas pour autant la prise en compte de tous les aspects.</p>

<p>Pour éviter cela, il est essentiel que les développeurs comprennent le contexte d’utilisation d’une fonctionnalité. Grâce à leur connaissance précise du fonctionnement de l’application, ils sont en effet en mesure de préciser le besoin technique. Par exemple, ils peuvent facilement voir si un embranchement est inexistant dans le code et se poser la question de la nécessité de le créer ou non, ou bien se rendre compte qu’un cas d’erreur n’est pas traité dans la spécification.</p>

<p>En évitant d’appliquer une spécification à la lettre et en n’hésitant pas à la remettre en question, il est possible d’éviter des bugs et donc de contribuer à l’amélioration de la qualité de l’application. Mais en plus cela permet d’éviter des aller retours, des étapes de développement et ainsi d’améliorer la productivité de l’équipe.</p>

<h1 id="le-code-sur-ingénieré-over-engineered">Le code “sur-ingénieré” (over-engineered)</h1>

<p>C’est un peu la contrepartie du cas précédent. Lors du développement d’une fonctionnalité complexe, une développeur voudra sur-anticiper certains aspects et amener des abstractions inutiles. Ces abstractions vont rendre le code plus difficile à lire et à maintenir.</p>

<p>Ce type de code est souvent difficile à détecter à la relecture.</p>

<p>Mais il existe tout de même quelques approches possibles. En voici une :</p>

<p>À la relecture, il est facile d’identifier un code qui a une approche un peu atypique. Si cette approche est en plus complexe, il est alors essentiel d’essayer de la remettre en question.</p>

<p>Pour cela, on pourra par exemple tenter de partir d’une page blanche d’imaginer l’architecture du code qu’on aurait utilisé pour développer la fonctionnalité.</p>

<p>Il est probable que la solution imaginée sera simpliste car le relecteur n’aura pas tous les détails en tête. Il faudra ensuite comparer l’architecture avec celle choisie. Si le choix d’architecture est significativement plus simple que celui du code relu, une discussion avec le développeur permettra facilement de déterminer si la complexité supplémentaire est utile ou non.</p>

<p>Les impacts de ce type de problème sont très important sur la maintenance et l’évolution d’une application. Et il est bien souvent très compliqué de revenir en arrière même seulement quelques mois après. Il est donc extrêmement important de les détecter et de les éliminer en amont pour éviter d’avoir à les maintenir plus tard.</p>

<h1 id="les-conflits-entre-développeurs">Les conflits entre développeurs</h1>

<p>Avec l’expérience, les développeurs prennent des habitudes. Mais dans le développement, plusieurs solutions sont souvent équivalentes.</p>

<p>Il est alors fréquent que les développeurs expérimentés souhaitent mettre en place une solution qui a fonctionné pour eux.</p>

<p>Dans certains cas, cela implique de remettre en question des choix qui ont déjà été faits avant l’arrivée du développeur. Parfois cela concerne de nouvelles fonctionnalités.</p>

<p>La plupart du temps, ça cause des débats entre développeurs qui prennent du temps et peuvent même parfois affecter l’ambiance dans l’équipe.</p>

<p>Il est important de ne pas négliger ces débats, car même si techniquement, les choix techniques ne sont pas forcément très importants, l’impact humain peut en revanche être considérable.</p>

<p>Il est alors important que les développeurs comprennent qu’un choix technique qui leur semble inférieur n’est pas forcément un problème et n’aura pas de conséquence importante.</p>

<p>D’un autre côté ces solutions alternatives peuvent parfois apporter un réel bénéfice, et ce bénéfice potentiel ne doit pas être négligé. Il doit bien sûr être considéré en regard de l’effort nécessaire pour le mettre en place. Une solution significativement supérieure devra malheureusement être écartée au profit de la solution en place même inférieure, quand l’effort pour la mettre en place est plus important que le bénéfice espéré.</p>

<p>Cependant, le choix pourra être à nouveau fait à l’occasion d’une éventuelle réécriture de la fonctionnalité en question ou bien en raison de l’évolution de l’application ou de l’équipe.</p>

<p>En général, ce type de conflit n’impacte pas directement la qualité du code. Mais si le conflit n’est pas traité, on peut se retrouver avec plusieurs solutions en concurrence dans l’application. Cela pose bien évidemment des problèmes de maintenance.</p>

<h1 id="conclusion">Conclusion</h1>

<p>En somme, la qualité du code et la stabilité d’une application sont des enjeux directement influencés par l’organisation de l’équipe, le respect des bonnes pratiques et la gestion des choix techniques. Les problèmes de structure, qu’ils concernent l’organisation des fichiers ou les décisions architecturales, peuvent avoir des répercussions importantes sur la lisibilité, la maintenabilité et l’évolution du code. Il est essentiel pour une équipe de bien comprendre l’impact de chaque décision, de privilégier la simplicité, et de respecter les normes et bonnes pratiques qui facilitent le travail collectif.</p>

<p>Le facteur humain, notamment les différences d’expérience entre les développeurs, joue également un rôle clé dans la manière dont le code est écrit et maintenu. La communication au sein de l’équipe et une gestion proactive des conflits sont indispensables pour éviter que des divergences de vues n’affectent la qualité globale du projet. En gardant ces principes à l’esprit et en choisissant les bons outils et méthodologies, il devient possible de produire un code robuste, évolutif et facile à maintenir, qui résiste à l’épreuve du temps tout en permettant à l’équipe de progresser dans un environnement harmonieux et productif.</p>]]></content><author><name></name></author><category term="Ruby" /><category term="Rails" /><category term="Architecture" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">ActiveRecord vs Repository : comprendre leurs différences</title><link href="/ruby/rails/architecture/2025/03/02/le-pattern-active-record-n-est-pas-repository.html" rel="alternate" type="text/html" title="ActiveRecord vs Repository : comprendre leurs différences" /><published>2025-03-02T07:00:00+00:00</published><updated>2025-03-02T07:00:00+00:00</updated><id>/ruby/rails/architecture/2025/03/02/le-pattern-active-record-n-est-pas-repository</id><content type="html" xml:base="/ruby/rails/architecture/2025/03/02/le-pattern-active-record-n-est-pas-repository.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Je vais vous parler d’un cas d’école vu et revu. Tous les développeurs et développeuses Rails sont confronté(e)s plutôt tôt que tard à la nécessité d’envoyer un email après avoir fait une opération en base de données. Typiquement, envoyer un email de bienvenue à un utilisateur après son inscription au service. Cependant, cette tâche simple peut vite se compliquer, surtout lorsque cela implique des callbacks ActiveRecord, des transactions en base de données et des files d’attentes…</p>

<p>Le décor est posé pour illustrer la confusion qui put être faite avec Ruby on Rails entre les patterns ActiveRecord et Repository.</p>

<h1 id="mise-en-situation">Mise en situation</h1>

<p>La situation est tout à fait banale : l’inscription d’un utilisateur correspond à la création d’une ligne dans la table users de la base de données. Si on utilise le vocabulaire d’ActiveRecord, on dira simplement qu’on va créer un nouvel utilisateur.</p>

<p>Et ça tombe bien, notre développeur ou développeuse n’a peut-être pas beaucoup d’expérience, mais a bien étudié et sait que dans ActiveRecord on a un callback appelé <code class="language-plaintext highlighter-rouge">after_create</code> et on veut justement envoyer un email après la création de l’utilisateur.</p>

<p>Notre apprenti dev a également  appris que l’envoi des emails doit se faire en utilisant une file d’attente et utilise donc Sidekiq, Good Job ou Solid Queue.</p>

<p>Ni une ni deux, en 5 minutes, notre dev met en place l’envoi de l’email après la création… Ça semble fonctionner, mais il y a un hic… Ça ne fonctionne pas à tous les coups, c’est très instable : dès fois le mail part, dès fois non.</p>

<h1 id="analyse-du-problème">Analyse du problème</h1>

<p>Pour comprendre ce qui se passe, notre junior doit comprendre comment les transactions interviennent ici.</p>

<p>Rails utilise les transactions pour les opérations en base de données (un <code class="language-plaintext highlighter-rouge">save</code>). Cela signifie que si une erreur survient pendant la création d’un utilisateur, toute la transaction (insertion dans la table <code class="language-plaintext highlighter-rouge">users</code> et autres actions associées) est annulée et rien n’est modifié dans la base de données. Si tout s’est bien passé, Rails valide la transaction et toutes les tables sont modifiées en même temps.</p>

<p>Et c’est là que le problème arrive. Notre app utilise le callback <code class="language-plaintext highlighter-rouge">after_create</code> pour ajouter l’envoi du mail à la file d’attente et ce callback intervient avant la fin de la transaction. Quand l’envoi de mail est mis en file d’attente, la transaction n’est pas encore terminée. Lorsque le job d’envoi d’email est lancé, la transaction n’est pas pas obligatoirement validée, et l’utilisateur n’est alors pas encore complètement créé dans la base de données. Cela provoque l’erreur de récupération de l’utilisateur, car ce dernier n’est pas encore visible dans la base de données pendant l’exécution du job.</p>

<h1 id="le-mauvais-conseil-du-senior">Le mauvais conseil du senior</h1>

<p>Evidemment, notre junior ne comprenant pas ce qui se passe et va voir un senior qui va lui dire: “Malheureux, tu as utilisé les callbacks, c’est le mal, sois damné pour l’éternité!”</p>

<p>Notre junior est plus confus, pourquoi il y a des callbacks dans Rails si on n’a pas le droit de les utiliser ?</p>

<p>« Mais tu n’as rien compris à la séparation des responsabilité. ActiveRecord c’est la base de données, tu ne peux pas l’utiliser pour envoyer des mails, pour ça tu dois utiliser un service. Et surtout n’appelle pas ton service avec ActiveRecord, utilise ton contrôleur. Mais comme ça va salir ton contrôleur, utilise donc dry-transaction<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. »</p>

<p>Et notre dev junior se retrouve alors avec une semaine de travail pour envoyer son email.</p>

<p>Notre senior ne pensait pas à mal, mais cela ne résout pas le vrai problème et complique inutilement la situation.</p>

<h1 id="distribuons-les-mauvais-points">Distribuons les mauvais points</h1>

<p>Alors dans cette histoire, notre dev senior a tort. Il n’a pas tort de vouloir vanter les mérites de l’écosystème dry, de la séparation des responsabilité, de séparer le code de la DB du code lié aux services externes mais il a tout a fait tort d’imposer ça à notre dev junior.</p>

<p>L’erreur du dev senior vient d’une confusion : le problème de notre junior n’est pas lié à l’utilisation des callbacks. En effet, ce callback n’aurait jamais posé problème si l’envoi de mail n’était pas fait dans un job. Le job n’est pas non plus le problème, tout se passerait bien si le job était déclenché après la transaction.</p>

<p>C’est d’ailleurs ce que notre junior doit faire ici : remplacer son <code class="language-plaintext highlighter-rouge">after_commit</code> par un <code class="language-plaintext highlighter-rouge">after_create_commit</code>. Dans ce cas, l’envoi de mail partira après la fin de la transaction, ce qui résoudra le problème. Notre junior pourra à cette occasion approfondir ses connaissances sur le fonctionnement interne des callbacks, leur ordre, et les interactions avec les transactions de base de données.</p>

<p>En l’occurrence et c’est le conseil que notre senior aurait du donner en premier quitte à digresser et poursuivre ensuite sur des points d’architecture plutôt que d’utiliser un argument au mieux incorrect, au pire fallacieux pour imposer sa manière de travailler et chercher à se rassurer sur ses propres décisions d’architecture logicielle. En faisant cela, il n’aide pas notre junior, et au lieu de résoudre son problème, il le contourne.</p>

<p>Cependant la solution du senior fonctionne également, même si elle est plus couteuse à mettre en place.</p>

<h1 id="activerecord-nest-pas-le-pattern-repository">ActiveRecord n’est pas le pattern Repository</h1>

<p>Une autre confusion faite par notre senior c’est qu’ActiveRecord n’est pas le pattern repository.</p>

<p>Si on reprend la définition d’ActiveRecord, la classe ActiveRecord est destinée à encapsuler les données et la logique métier. Or, l’envoi d’email fait tout à fait partie de la logique métier et dans ce pattern il est tout à fait légitime qu’il soit déclenché par ActiveRecord.</p>

<p>Dans le pattern Repository, ce n’est pas le cas, la responsabilité d’une classe Repository est uniquement de communiquer avec la base de données et ne doit donc contenir aucune logique métier. Dans Rails, il est possible d’utiliser ActiveRecord avec le pattern Repository, mais cela nécessitera de se passer d’un bon nombre de fonctionnalités d’ActiveRecord (et cela comprend probablement les callbacks).</p>

<p>Mais c’est un choix d’architecture. Il n’y a pas qu’une seule manière de faire. Et chaque choix à ses conséquences, ses avantages et ses inconvénients. Et c’est bien sûr aussi une question de préférence personnelle.</p>

<p>Pour moi, l’avantage principal d’ActiveRecord est la lisibilité du code, le côté magique magique qui n’est en fait que de la complexité masquée (pour demander à un chien d’aboyer, on écrit <code class="language-plaintext highlighter-rouge">dog.bark!</code> et pas <code class="language-plaintext highlighter-rouge">DogBarker.new(AnimalFactory.create(:dog, DogAttributeValidator.validate(dog_attributes)).call</code> par exemple, et ce même si l’action implique d’appeler un service externe ou je ne sais quoi, les détails d’implémentation sont masqués.</p>

<p>Mais il y a un prix à payer pour avoir cet avantage. Et ceux qui ne sont pas prêts à en payer le prix peuvent tout à fait choisir une autre architecture. Mais ils ne doivent pas se sentir obligés d’imposer leur décision à tout le monde pour se rassurer sur leurs propres décisions.</p>

<p>Laissons donc notre junior faire ses propres choix d’architecture, de peser le pour et le contre.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Chaque choix d’architecture a ses propres défauts. ActiveRecord a les siens, mais les callbacks sont un outil puissant et je trouve dommage de décourager les dev juniors de les utiliser au lieu de les inciter à en comprendre leur fonctionnement pour les utiliser correctement pour les maîtriser.</p>

<p>Dans nos débats, utilisons les arguments, restons factuels, pragmatiques, ouverts et courtois. Et n’utilisez pas d’homme de paille comme je l’ai fait ici…</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>L’outil dry-transaction est une approche qui permet d’encapsuler des étapes métier dans des objets distincts, ce qui permet de mieux structurer le code en séparant les responsabilités. Cependant, pour des raisons de cohérence, son utilisation impliquera de convertir tout le code de l’application à cette approche ainsi que la formation de l’équipe de développement. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><category term="Ruby" /><category term="Rails" /><category term="Architecture" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Installer PostgreSQL : Homebrew vs. Docker vs. Postgres.app</title><link href="/postgresql/homebrew/docker/2024/11/26/installer-postgresql-homebrew-vs-docker-vs-postgres-app.html" rel="alternate" type="text/html" title="Installer PostgreSQL : Homebrew vs. Docker vs. Postgres.app" /><published>2024-11-26T06:00:00+00:00</published><updated>2024-11-26T06:00:00+00:00</updated><id>/postgresql/homebrew/docker/2024/11/26/installer-postgresql-homebrew-vs-docker-vs-postgres-app</id><content type="html" xml:base="/postgresql/homebrew/docker/2024/11/26/installer-postgresql-homebrew-vs-docker-vs-postgres-app.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>L’installation de PostgreSQL peut être réalisée de plusieurs manières. Dans cet article, nous allons explorer les avantages et les inconvénients de différentes méthodes d’installation pour déterminer laquelle répondra le mieux à vos besoins spécifiques.</p>

<p>Comprendre les distinctions entre les installations destinées à un environnement de production et celles conçues pour le développement est crucial, chaque contexte ayant ses propres défis et priorités.</p>

<p>Nous débuterons des considérations générales sur les environnements de production, avant de plonger plus en détail dans les différentes alternatives d’installation dans le cadre d’un environnement de développement.</p>

<h1 id="installer-postgresql-en-production">Installer PostgreSQL en production</h1>

<p>Choisir le bon moyen d’installer PostgreSQL dans un environnement de production est essentiel pour garantir la performance, la sécurité et la robustesse de votre application. Bien que cet aperçu ne couvre pas toutes les possibilités, il vise à clarifier vos choix et à vous guider vers l’option la plus adaptée à vos besoins spécifiques. Je vous exposerai notamment les différences entre l’utilisation de bases de données gérées et l’installation sur vos propres serveurs dédiés.</p>

<h2 id="utiliser-un-service-de-base-de-données-gérée">Utiliser un service de base de données gérée</h2>

<p>Pour de nombreux projets, notamment ceux qui démarrent, opter pour une instance de base de données gérée est souvent le choix le plus évident. Voici les avantages majeurs de cette approche :</p>

<ul>
  <li><strong>Déploiement aisé :</strong> Facile à mettre en place, souvent en un clic, sécurisé et optimisé par défaut. Aucun besoin de procédures manuelles ou techniques pour l’installation.</li>
  <li><strong>Disponibilité immédiate :</strong> La base de données est généralement disponible après quelques dizaines de secondes.</li>
  <li><strong>Maintenance facilitée :</strong> Les mises à jour et la maintenance sont gérées par le prestataire.</li>
  <li><strong>Intégration simplifiée :</strong> L’URL de connexion peut être simplement ajoutée à votre application.</li>
  <li><strong>Sauvegardes automatisées :</strong> Ce service est généralement également géré par le prestataire.</li>
  <li><strong>Fonctionnalités avancées :</strong> Accès à des options comme la redondance.</li>
  <li><strong>Gain de temps :</strong> Permet un focus sur le développement, surtout au démarrage du projet.</li>
</ul>

<p>Cependant, il existe quelques inconvénients :</p>

<ul>
  <li><strong>Coût croissant :</strong> Le coût peut devenir prohibitif à mesure que vos besoins augmentent (en pratique : vous mettez à jour votre base avec des instances plus grandes et cela coute plus cher).</li>
  <li><strong>Complexité de migration :</strong> Une fois que votre base de données sera devenue importante, la migration vers un autre prestataire sera plus complexe, plus couteuse et nécessitera une indisponibilité de votre application plus importante.</li>
  <li><strong>Contrôle limité :</strong> Vous n’aurez pas directement la main sur le serveur et vous n’aurez pas forcément accès à toutes les options.</li>
  <li><strong>Connaissances nécessaires :</strong> Une compréhension des détails de fonctionnement internes de la base de données restera nécessaire pour conserver de bonnes performances à mesure que le volume de données dans la base augmente.</li>
  <li><strong>Dépendance au fournisseur :</strong> La dépendance au fournisseur, qui peut être une aide précieuse mais également un point de blocage en cas de problèmes.</li>
</ul>

<p>Par exemple, notre entreprise a initialement opté pour un service de base de données géré. Cependant, après un incident, nous avons réalisé que le manque de contrôle rendait la migration vers un autre fournisseur (géré également) plus complexe que prévue, ce qui nous a poussés à envisager une solution gérée en interne.</p>

<p>En conclusion, cette solution convient pour des besoins simples. Réfléchissez à vos besoins immédiats par rapport à votre budget. À mesure que votre application évolue, considérez si le coût et le manque de contrôle justifient alternative.</p>

<h2 id="installation-sur-un-serveur-dédié">Installation sur un serveur dédié</h2>

<p>Installer PostgreSQL sur un serveur sous votre administration est une autre option viable. Ceci peut être réalisé via Docker ou une installation classique, selon vos préférences et votre familiarité avec ces technologies. Voici quelques distinctions à prendre en compte :</p>

<ul>
  <li><strong>Maintenance avec Docker :</strong> Utiliser Docker ajoute une couche de maintenance supplémentaire, nécessitant la gestion des mises à jour de Docker en parallèle de celles de PostgreSQL.</li>
  <li><strong>Images préconfigurées :</strong> Docker vous propose des images prêtes à l’emploi, simplifiant le processus initial par rapport à un montage manuel.</li>
  <li><strong>Confort d’utilisation :</strong> Pour ceux moins familiers avec Docker, une installation classique pourrait être plus intuitive.</li>
  <li><strong>Intégration dans l’infrastructure existante :</strong> Si Docker est déjà présent pour d’autres services dans votre système, intégrer PostgreSQL à travers Docker vous permettra d’harmoniser votre configuration.</li>
</ul>

<p>Les deux approches sont comparables en termes de ressources et de sécurité. Cette solution est idéale pour les applications nécessitant des performances élevées et une configuration spécifique, par exemple si vos besoins incluent des extensions non prises en charge par des services gérés. Bien que potentiellement moins coûteuse que certains services gérés en frais de service, elle demande un investissement continu pour maintenir la sécurité et le bon fonctionnement du système. Et vous n’aurez pas de contact extérieur en cas de problème.</p>

<p>Cette solution est préconisée pour les entreprises en croissance disposant des ressources nécessaires à la maintenance interne. Il est crucial que votre équipe possède les compétences requises, tout en prévoyant un budget pour la formation continue. Un engagement soutenu est indispensable pour les mises à jour, la maintenance et l’optimisation régulière.</p>

<h1 id="postgresql-pour-les-développeurs">PostgreSQL pour les développeurs</h1>

<p>Dans mes recherches récentes sur PostgreSQL, j’ai souvent remarqué une recommandation pour l’installation via Postgres.app. Personnellement, j’ai trouvé que l’utilisation de Homebrew me convenait parfaitement.</p>

<p>Je vais me concentrer ici sur l’environnement Mac, bien que les concepts discutés puissent facilement être adaptés à d’autres systèmes d’exploitation. Cette réflexion vise à offrir aux développeurs une meilleure compréhension des options disponibles, et à les aider à choisir en fonction de leur environnement de travail et de leurs préférences logicielles.</p>

<h2 id="avec-postgresapp">Avec Postgres.app</h2>

<p>L’installation via Postgres.app présente plusieurs avantages notables :</p>

<ul>
  <li><strong>Interface graphique :</strong> Bien que basique, elle apporte un confort supplémentaire dans l’interaction avec les bases de données.</li>
  <li><strong>Installation autonome :</strong> Toutes les dépendances nécessaires sont intégrées, évitant des installations supplémentaires.</li>
  <li><strong>Flexibilité des versions :</strong> Permet d’installer et d’exécuter plusieurs versions de PostgreSQL simultanément, facilitant ainsi le test et le développement sur différentes versions.</li>
</ul>

<p>Ainsi, pour les développeurs qui ne s’appuient pas déjà sur Homebrew, Postgres.app constitue souvent le choix le plus judicieux, simplifiant l’expérimentation et le développement.</p>

<h2 id="avec-homebrew">Avec Homebrew</h2>

<p>L’un des <a href="https://chrisrbailey.medium.com/postgres-on-mac-skip-brew-use-postgres-app-dda95da38d74">inconvénients souvent mentionnés</a> de l’installation de PostgreSQL via Homebrew réside dans le fait qu’il mette à jour automatiquement les packages. Cela pose deux problèmes majeurs : d’abord, les mises à jour des versions majeures en local peuvent entraîner une divergence par rapport à l’environnement de production, alors qu’il est essentiel de maintenir les environnements de développement et de production aussi similaires que possible. Ensuite, une mise à jour majeure peut rendre le format de stockage utilisé incompatible, empêchant ainsi le démarrage de la base de données.</p>

<p>Cependant, Homebrew offre des solutions simples pour éviter ce problème. Vous pouvez préciser la version majeure à utiliser avec <code class="language-plaintext highlighter-rouge">@</code> et <code class="language-plaintext highlighter-rouge">brew link</code>. Vous pouvez également fixer la version mineure si vous le souhaitez avec la commande <code class="language-plaintext highlighter-rouge">pin</code> :</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>postgresql@17
brew pin postgresql@17
brew <span class="nb">link </span>postgresql@17
</code></pre></div></div>

<p>En appliquant ces commandes, vous vous assurez que votre environnement local reflète précisément la version de votre environnement de production, réduisant ainsi les problèmes de compatibilité.</p>

<p>En appliquant ces commandes, vous vous assurez que votre environnement local reflète précisément la version de votre environnement de production, réduisant ainsi les risques de problèmes de compatibilité. Vous éviterez également les désagréments liés aux mises à jour automatiques de Homebrew de versions majeures qui peuvent empêcher PostgreSQL de démarrer.</p>

<h2 id="configuration-dans-rails">Configuration dans Rails</h2>

<p>Que vous utilisiez Homebrew ou Postgres.app, l’intégration de PostgreSQL dans une application (Rails dans l’exemple) ne nécessite aucune configuration. Les droits par défaut ne respectent pas les bonnes pratiques pour un déploiement en production, ne posent aucun problème pour du développement. Voici pour illustration un extrait de mon <code class="language-plaintext highlighter-rouge">database.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">postgresql</span>
  <span class="na">encoding</span><span class="pi">:</span> <span class="s">unicode</span>
  <span class="c1"># For details on connection pooling, see Rails configuration guide</span>
  <span class="c1"># http://guides.rubyonrails.org/configuring.html#database-pooling</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;</span>

<span class="na">development</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">myapp_development</span>
</code></pre></div></div>

<p>C’est exactement la configuration par défaut générée par Rails lors de la création de l’application, simplement en en choisissant de configurer PostgreSQL comme base de données, sans aucune modification. Après cela je peux créer la base :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails new myapp <span class="nt">--database</span><span class="o">=</span>postgresql
bin/setup
</code></pre></div></div>

<p>Ensuite, la connexion à la base de données se fait simplement via :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails db
</code></pre></div></div>

<p>Et mon application fonctionne sans rien avoir à configuré du côté de PostgreSQL. Pas d’utilisateur à créer ou quoi que ce soit.</p>

<p>Un point à ne pas oublier avec Postgres.app, pour utiliser les outils en ligne de commande,  <a href="https://postgresapp.com/documentation/cli-tools.html">assurez-vous d’ajouter le chemin approprié à la variable <code class="language-plaintext highlighter-rouge">PATH</code> de votre shell</a>.</p>

<h2 id="avec-docker">Avec Docker</h2>

<p>Intégrer PostgreSQL avec Docker dans votre développement présente une alternative potentielle à considérer.</p>

<p>Si votre environnement est déjà basé sur Docker et que vous êtes à l’aise avec sa configuration, tout comme en production, c’est une bonne option. Cependant, cela nécessite l’installation de Docker, ce qui pourrait entraîner des problèmes de performance sur Mac. Pour éviter ces problèmes, vous pouvez utiliser une alternative comme OrbStack à la place de Docker Desktop.</p>

<p>L’installation via Docker sera très avantageuse si votre configuration l’utilise déjà, car elle vous permettra de démarrer tous vos services avec. Si n’avez pas particulièrement investi dans Docker, Postgres.app ou Homebrew peuvent être de meilleures alternatives.</p>

<p>Enfin, avec Docker, il est possible d’utiliser la configuration simplifiée d’application décrite précédemment, mais cela dépendra de la configuration avec laquelle Docker aura installé PostgreSQL.</p>

<h1 id="conclusion">Conclusion</h1>

<p>En fin de compte, le choix de la méthode d’installation de PostgreSQL doit être guidé par une analyse approfondie de vos besoins spécifiques en matière de performances, de sécurité et de gestion des ressources. Un développeur travaillant sur un petit projet n’aura pas les mêmes attentes qu’une entreprise gérant une application complexe.</p>

<p>Avant de prendre une décision, évaluez la croissance potentielle de votre projet. Optez pour une solution qui non seulement répond à vos besoins actuels, mais aussi s’adapte à son évolution future.</p>

<p>Pour les débuts de projets ou pour les développeurs individuels, une base de données gérée peut apporter un confort considérable. À l’inverse, les entreprises avec des exigences spécifiques en matière de performance et les ressources techniques nécessaires préféreront souvent une installation sur serveur dédié ou via Docker.</p>

<p>Il n’existe pas de solution universelle qui serait supérieure aux autres dans tous les cas. En évaluant attentivement ces facteurs, vous pouvez choisir la solution d’installation de PostgreSQL la mieux adaptée à vos environnements. Adaptez vos choix au fil du temps pour répondre aux évolutions de votre projet.</p>]]></content><author><name></name></author><category term="PostgreSQL" /><category term="Homebrew" /><category term="Docker" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Pourquoi continuer à faire du progressive enhancement en 2024 ?</title><link href="/rails/hotwire/stimulus/turbo/2024/11/05/pourquoi-continuer-a-faire-du-progressive-enhancement.html" rel="alternate" type="text/html" title="Pourquoi continuer à faire du progressive enhancement en 2024 ?" /><published>2024-11-05T06:00:00+00:00</published><updated>2024-11-05T06:00:00+00:00</updated><id>/rails/hotwire/stimulus/turbo/2024/11/05/pourquoi-continuer-a-faire-du-progressive-enhancement</id><content type="html" xml:base="/rails/hotwire/stimulus/turbo/2024/11/05/pourquoi-continuer-a-faire-du-progressive-enhancement.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>L’amélioration progressive est une méthode de conception des sites Web qui consiste à réaliser une version minimaliste et résiliente d’une fonctionnalité. C’est à dire qui sera utilisable dans un navigateur des années 2000. Puis d’intégrer progressivement par couches successives les fonctionnalités modernes.</p>

<p>Pour réaliser cela, on commence par écrire une page avec du code HTML minimaliste et standard, on lui associe une feuille de style CSS avec des directives également minimalistes et standard. On obtient alors une page fonctionnelle qui s’affiche instantanément même avec une connexion bien pourrie et avec le JavaScript désactivé.</p>

<p>Toutes les fonctionnalités non indispensables mais qui améliorent l’expérience utilisateur (polices, comportements interactifs, effets visuels) sont ajoutées ensuite progressivement tout en permettant le fonctionnement de base de la page quand ces améliorations ne sont pas activées.</p>

<h1 id="létat-de-lart-en-2024">L’état de l’art en 2024</h1>

<p>La <a href="https://piccalil.li/blog/its-about-time-i-tried-to-explain-what-progressive-enhancement-actually-is/">motivation généralement admise</a> dans la littérature pour utiliser l’amélioration progressive est de proposer une expérience utilisateur acceptable même dans des conditions dégradées.</p>

<p>Mais en 2024, il est tout à fait possible de lancer un service sans se préoccuper de l’expérience d’un petit nombre de personnes dans des conditions dégradées. C’est d’ailleurs pour ça que beaucoup de développeurs depuis plus de 20 ans choisissent des technologies qui nécessitent d’avoir JavaScript activé et nécessite généralement le téléchargement d’une grande quantité de JavaScript avant de pouvoir commencer à intéragir avec le site.</p>

<p>C’est une approche qui permet sans aucun doute de faire des affaires florissantes. Et même si une partie des utilisateurs est mise de côté, cela n’empêchera certainement pas votre service d’être un succès.</p>

<p>Et même si j’ai évidemment à cœur de ne mettre personne sur le côté dans mes développements, ce n’est pas la raison la plus importante pour moi pour adopter cette approche.</p>

<h1 id="la-raison-pour-faire-de-lamélioration-progressive">La raison pour faire de l’amélioration progressive</h1>

<p>La bonne raison c’est celle qui va vous convaincre ou vous permettre de convaincre toute une équipe, des dirigeants de passer sur cette approche.</p>

<p>Si vous vous espérez convaincre toutes ces personnes en leur disant qu’ils vont pouvoir augmenter leur cible de 98% des utilisateurs à 99%, vous avez peu de chances de les convaincre à moins que ce soit une multinationale déjà bien implantée dont c’est peut-être le dernier levier de croissance.</p>

<p>Même si vous les convainquez qu’une majeure partie de leurs utilisateurs sera de temps en temps confrontée à une mauvaise expérience (une pensée à tous ceux qui utilisent leur téléphone dans les transports), parce qu’elle se trouvera face à des conditions dégradées, ça ne permettra pas forcément de changer leurs priorités.</p>

<p>Mais pour moi le plus intéressant est que cette technique permet d’obtenir un code plus simple et plus facile à maintenir.</p>

<h1 id="lamélioration-progressive-améliore-le-code">L’amélioration progressive améliore le code</h1>

<p>Pour moi, la bonne raison c’est que cette approche permet d’améliorer la qualité du code et d’éviter un nombre considérable de problèmes dans une application. C’est ce que je vais vous expliquer ici.</p>

<blockquote>
  <p>Working in the actual deliverable’s medium — the web — in cycles/iterations/sprints, with progressive enhancement at the root will — I promise — result in smaller codebases, simpler UIs and happier users!</p>

  <p><a href="https://piccalil.li/author/andy-bell"><em>Andy Bell</em></a></p>

</blockquote>

<h2 id="cela-réduit-la-quantité-de-javascript">Cela réduit la quantité de JavaScript</h2>

<p>Pour commencer, on ne va utiliser JavaScript que pour améliorer l’expérience existante.
Cette expérience sera donc réalisée uniquement grâce aux fonctionnalités standard du Web.
On utilisera du coup par défaut <a href="/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails.html">les liens et les formulaires</a>
pour communiquer avec le serveur. Pour une majorité des fonctionnalités
cela sera tout à fait suffisant, et il n’y aura rien besoin d’ajouter
pour avoir une expérience satisfaisante.</p>

<p>Mais parfois, on voudra optimiser l’expérience. Prenons l’exemple d’un champ avec autocompletion.
Le principe est d’afficher une liste de suggestions au fur et à mesure de la saisie.
<a href="https://gomakethings.com/how-to-create-an-autocomplete-input-with-only-html/">Une telle fonctionnalité <del>est irréalisable sans</del> nécessite souvent JavaScript</a>
puisqu’elle nécessite de déclencher un comportement au fil de la saisie.
Si une interaction avec le serveur est nécessaire avec le serveur, le HTML simple ne suffit pas.</p>

<p>Pourtant réaliser ce type de fonctionnalité en suivant les principes de
l’amélioration progressive permet de simplifier l’architecture du code.</p>

<p>Imaginons à quoi pourrait ressembler une telle fonctionnalité sans JavaScript.
Nous pouvons afficher un champ de saisie et une liste de proposition initialement vide.
Lors de la saisie, l’utilisateur va vouloir consulter les suggestions.
Pour cela, plutôt que de lui afficher instantanément, l’utilisateur pourra activer
un bouton dédié au chargement des suggestions sur le formulaire pour les afficher.
Sans JavaScript l’ensemble de la page sera rechargée y compris la liste.
Il pourra ensuite choisir un élément dans la liste et valider définitivement le formulaire.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:product</span>
  <span class="nb">attr_accessor</span> <span class="ss">:product_name</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">none</span> <span class="k">if</span> <span class="n">query</span><span class="p">.</span><span class="nf">blank?</span>

    <span class="n">where</span><span class="p">(</span><span class="s1">'name like :query'</span><span class="p">,</span> <span class="ss">query: </span><span class="s2">"</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="se">\%</span><span class="s2">"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">OrdersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:order</span><span class="p">].</span><span class="nf">permit!</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">params</span><span class="p">[</span><span class="ss">:commit</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="vi">@order</span><span class="p">.</span><span class="nf">save</span>
      <span class="n">redirect_to</span> <span class="vi">@order</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="ss">:new</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">model: </span><span class="vi">@order</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;fieldset&gt;</span>
    <span class="nt">&lt;legend&gt;</span>Todo<span class="nt">&lt;/legend&gt;</span>

    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>

    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:product_name</span><span class="p">,</span>
                     <span class="ss">list: </span><span class="s1">'product-suggestions'</span><span class="p">,</span>
                     <span class="ss">value: </span><span class="n">params</span><span class="p">.</span><span class="nf">dig</span><span class="p">(</span><span class="ss">:order</span><span class="p">,</span> <span class="ss">:product_name</span><span class="p">)</span> <span class="cp">%&gt;</span>

    <span class="nt">&lt;datalist</span> <span class="na">id=</span><span class="s">"product-suggestions"</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%</span> <span class="no">Product</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="vi">@order</span><span class="p">.</span><span class="nf">product_name</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">product</span><span class="o">|</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">content_tag</span> <span class="ss">:option</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="ss">value: </span><span class="n">product</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/datalist&gt;</span>

    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">submit</span> <span class="s1">'Rechercher'</span><span class="p">,</span> <span class="ss">name: </span><span class="s1">'autocomplete'</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/fieldset&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>On peut ensuite utiliser JavaScript pour améliorer l’expérience. L’avantage d’avoir utilisé
cette approche, c’est qu’on aura très peu de JavaScript à ajouter. Et en utilisant
des technologies comme Hotwire Turbo, on n’aura même pas à ajouter le JavaScript nous-même
mais seulement un peu de configuration sur les formulaires. Le JavaScript permettra de
masquer le bouton et de déclencher le comportement lors de la saisie. Ce comportement consiste à
charger la liste puis en remplaçant la liste sur la page actuelle. Le chargement de la liste
pourra se faire en récupérant la page existante mise à jour (et donc sans nécessiter de
mise à jour de la partie serveur) ou bien une version partielle de la page contenant
uniquement les suggestions.</p>

<p>Dans notre exemple, on note que le contrôleur n’a besoin d’aucune adaptation
pour pouvoir afficher les suggestions de produits et nécessite uniquement
de vérifier si <code class="language-plaintext highlighter-rouge">params[:commit]</code> est défini pour gérer les comportements interactifs
avant validation.</p>

<p>On a donc montré comment cette approche peut permettre de réduire la quantité de JavaScript
dans une application. Nous allons maintenant voir comment la réduction du JavaScript permet en plus
de faciliter la maintenance de votre application.</p>

<h1 id="cela-facilite-la-maintenance-du-code">Cela facilite la maintenance du code</h1>

<p>Dans une application Rails, le code JavaScript est plus difficile et complexe à tester car il nécessite un navigateur Web pour fonctionner contrairement au code backend qui tourne nativement sur le serveur sans navigateur. Cela va donc rendre les tests également plus longs à s’exécuter.</p>

<p>Avec l’amélioration progressive le code JavaScript produit est plus général, ce qui le rend beaucoup plus facile à tester. Il n’y a pas de dépendances envers le code métier donc le code est plus susceptible de pouvoir être réutilisé ailleurs dans l’application. Par effet boule de neige, cette capacité à pouvoir être réutilisé réduit d’autant la quantité de code JavaScript. C’est un cercle vertueux.</p>

<p>Évidemment, le code JavaScript (plus précisément le code JavaScript exécuté directement par le navigateur) n’est pas en soi un problème, mais son utilisation systématique rend les systèmes plus complexes. La réduction de cette complexité entraine une amélioration de la maintenabilité des applications.</p>

<h1 id="un-deuxième-exemple">Un deuxième exemple</h1>

<p>Pour copier un texte dans le presse-papier automatiquement, le JavaScript est obligatoire.</p>

<p>Mais là encore, on peut concevoir une fonctionnalité équivalente qui ne nécessite pas de JavaScript. À savoir : afficher le texte à copier et suggérer à l’utilisateur de copier le texte en question lui-même en utilisant les fonctionnalités de son système d’exploitation.</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@order</span><span class="p">.</span><span class="nf">product</span> <span class="cp">%&gt;</span>
  URL <span class="cp">&lt;%=</span> <span class="n">text_field_tag</span> <span class="s1">''</span><span class="p">,</span> <span class="n">url_for</span><span class="p">(</span><span class="vi">@order</span><span class="p">.</span><span class="nf">product</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>Le besoin de l’utilisateur est ainsi satisfait. La solution proposée est extrêmement rudimentaire mais terriblement efficace.</p>

<p>Il est ensuite possible d’utiliser JavaScript pour améliorer l’expérience utilisateur de cette fonctionnalité de base en permettant de réaliser l’opération de sélection du texte et de copie automatiquement.</p>

<p>Le principe consiste à (éventuellement) masquer le texte à copier tout en le laissant dans de code de la page et à ajouter un bouton qui permettra de déclencher la copie dans le presse-papier de l’utilisateur et afficher un message confirmant le bon déroulement de l’opération.</p>

<p>Ainsi lorsque JavaScript n’est pas disponible, le site affichera un texte simple et suggèrera à l’utilisateur de copier le texte avec un message. La fonction restera ainsi accessible. Puis quand le JavaScript, l’utilisateur verra un simple bouton pour copier le texte automatiquement.</p>

<p>Dans cet exemple également, le principe reste le même : on crée une version de base fonctionnelle sans JavaScript et on en améliore l’expérience utilisateur en ajoutant plus d’interactivité grâce à JavaScript. On constante tous les avantages cités précédemment : la fonction est toujours accessible et la version améliorée est réutilisable, facilement maintenable et ne nécessite que peu de code supplémentaire.</p>

<h1 id="plus-cest-complexe-plus-cest-avantageux">Plus c’est complexe, plus c’est avantageux</h1>

<p>L’exemple précédent était extrêmement simple, mais est suffisant pour illustrer l’intérêt de cette approche.</p>

<p>Poussons l’exemple un peu plus loin en y ajoutant des interactions avec le serveur.</p>

<p>Désormais, notre utilisateur va sélectionner un produit de la base de données à partir de son nom (en utilisant la fonction d’autocomplete). Notre utilisateur souhaite ensuite copier le lien permettant d’accéder à ce produit pour l’envoyer par email à un client.</p>

<p>Comme dans le premier exemple, la saisie de l’utilisateur va être envoyée au serveur (via le bouton du formulaire ou bien automatiquement), et le navigateur va récupérer une liste de résultats.</p>

<p>La différence cette fois, est que lorsque l’utilisateur sélectionne un résultat, on veut lui proposer de copier le lien correspondant à ce résultat.</p>

<p>Pour cela on peut utiliser la même approche et ajouter un bouton ‘Afficher le lien’ sur le formulaire pour déclencher l’interaction. Une fois notre produit sélectionner, l’utilisateur pourra activer ce bouton et la page sera rechargée avec le lien du produit que l’utilisateur pourra copier.</p>

<p>Ici aussi, on pourra améliorer l’expérience utilisateur en déclenchant ce comportement automatiquement lors de la sélection du produit. L’utilisateur verra alors un bouton lui permettant de copier le lien dans le presse-papier.</p>

<p>Sans JavaScript, l’utilisateur utilise les boutons du formulaire pour déclencher les comportements interactifs. Avec, les comportements sont déclenchés automatiquement par les actions de l’utilisateurs. L’expérience est ainsi plus naturelle.</p>

<p>On peut noter dans nos approches qu’on ajoute ces boutons dans le formulaire existant. Il est essentiel de procéder ainsi pour que le serveur récupère les informations et qu’au rechargement de la page, la saisie de l’utilisateur soit conservée sur la nouvelle page. Avec JavaScript on peut recharger partiellement la page et contourner le problème, mais sans JavaScript le rechargement de la page sera un passage obligé.</p>

<p>On remarque également que chaque comportement a son propre bouton. Cette approche permet de pourvoir réutiliser et combiner les différents comportements. Cela peut permettre au serveur de s’adapter si nécessaire, autrement l’activation de n’importe quel bouton pourra déclencher l’ensemble des interactions disponibles.</p>

<p>Le fait d’utiliser le processus requête / réponse habituel du navigateur permet aussi de mieux gérer les erreurs. En cas d’erreur serveur ou de problème réseau empêchant de le chargement de la page par exemple un message clair sera affiché au client là où une interaction JavaScript par défaut se contentera de ne pas fonctionner.</p>

<p>Si nous avions eu une autre approche, il nous aurait peut-être paru plus naturel de combiner les comportements en même temps, d’envoyer des requêtes au serveur et d’utiliser une réponse avec un format qui ne pourrait être traité par le navigateur qu’avec du code JavaScript. Finalement, le résultat aurait été moins robuste, moins fiable et plus difficile à maintenir.</p>

<p>Finalement, on peut voir grâce à cet exemple qu’on peut facilement utiliser cette approche pour concevoir des interactivités complexes en ajoutant très peu de code JavaScript sur le navigateur. Mais évidemment, ce qu’on gagne côté client on le perd côté serveur.</p>

<p>Notre formulaire doit en effet répondre à plusieurs besoins fonctionnels :</p>

<ul>
  <li>Il faut distinguer les différentes actions (autocomplete, affichage du lien, validation définitive).</li>
  <li>Lorsqu’on ne valide par définitivement le formulaire, il faut l’afficher à nouveau tout en conservant la saisie de l’utilisateur sans réellement créer l’objet associé.</li>
  <li>Lorsqu’un produit est sélectionné la page renvoyée par le serveur doit contenir le lien à copier et la configuration permettant l’activation du comportement JavaScript pour la copie dans le presse-papier.</li>
</ul>

<p>Gérer ces comportements supplémentaires nécessite effectivement des adaptations du serveur. Mais en réalité c’est un moindre mal :</p>

<ul>
  <li>Les adaptations sont en réalité simple à implémenter, de simples ajouts dans le code de la vue sont suffisants pour transmettre les nouvelles données des différentes interactions.</li>
  <li>Il suffira de re-réhydrater le formulaire avec les paramètres reçus par le serveur pour préserver la saisie.</li>
  <li>En réalité, il n’est pas nécessaire de distinguer les différentes actions individuellement. Il suffit en fait de différencier la validation définitive d’une simple demande d’interaction. On voit que cette approche est facilement généralisable et la quantité de code n’augmente pas avec le nombre de comportement interactifs (on gère tous les comportements interactifs avec une seule modification du contrôleur).</li>
  <li>Une autre approche aurait également nécessité des adaptations côté serveur (par exemple, une API permettant de renvoyer la liste ou le lien à copier). On peut en plus remarquer que les adaptations rendues nécessaires par l’approche d’amélioration progressive sont beaucoup plus génériques et seront donc aussi plus faciles à maintenir.</li>
</ul>

<p>Cette approche ne dépend pas du type de fonctionnalité et peut donc être facilement généralisée à n’importe quel type de comportement interactif. En plus les fonctionnalités elles-mêmes sont génériques et pourront sans difficulté être réutilisées dans différents contextes et combinées pour fournir une expérience optimale tout en s’adaptant à la qualité de l’environnement de l’utilisateur.</p>

<h2 id="conclusion">Conclusion</h2>

<p>L’amélioration progressive, bien que n’étant pas un concept nouveau est toujours d’actualité.
Elle permet de concevoir toutes les fonctionnalités dont vous avez besoin à l’aide
des technologies web standard, complétées progressivement avec du JavaScript pour
enrichir l’expérience utilisateur. Même si de nombreux services se lancent sans
se soucier des conditions dégradées que peuvent expérimenter leurs utilisateurs,
notamment mobiles, l’amélioration progressive permet d’atteindre un public plus large
et d’offrir une expérience utilisateur satisfaisante.</p>

<p>Les avantages de cette approche sont multiples. En réduisant la quantité de
JavaScript utilisée, elle conduit à un code plus léger, simple et facile à maintenir.
La maintenance s’en trouve facilitée, car le code JavaScript est également
plus général et réutilisable. Cette méthode offre également une robustesse accrue,
les interactions utilisateur étant plus fiables grâce à l’utilisation des
cycles de requête/réponse standards du navigateur, qui offrent également
une meilleure gestion des erreurs par défaut.</p>

<p>Enfin, bien que l’adoption de l’amélioration progressive nécessite
quelques ajustements côté serveur, ces derniers restent simples et génériques,
favorisant l’évolutivité et la maintenabilité du code. En intégrant ces principes,
les développeurs peuvent concevoir des applications performantes et accessibles.</p>]]></content><author><name></name></author><category term="Rails" /><category term="Hotwire" /><category term="Stimulus" /><category term="Turbo" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Guide de bonnes pratiques pour des formulaires Rails simples et épurés</title><link href="/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails.html" rel="alternate" type="text/html" title="Guide de bonnes pratiques pour des formulaires Rails simples et épurés" /><published>2024-10-15T16:30:00+00:00</published><updated>2024-10-15T16:30:00+00:00</updated><id>/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails</id><content type="html" xml:base="/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Dans les applications Rails, les <a href="https://guides.rubyonrails.org/action_controller_overview.html">contrôleurs</a> et les <a href="https://guides.rubyonrails.org/action_view_overview.html">vues</a> peuvent devenir complexes quand on y ajoute de la logique métier ou du balisage qui pourrait être évité.</p>

<p>Dans cet article, nous explorerons des stratégies pour garder votre code des formulaires lisible, notamment en utilisant les <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html">FormBuilders</a> de Rails et les <a href="https://guides.rubyonrails.org/association_basics.html">associations</a> <a href="https://guides.rubyonrails.org/active_record_basics.html">ActiveRecord</a>.</p>

<h1 id="problématique">Problématique</h1>

<p>Dans la plupart des entreprises où j’ai travaillé, j’ai souvent vu des contrôleurs et des vues encombrées, et malgré de nombreux efforts on a évité complètement ce problème.</p>

<p>Pour moi, un contrôleur idéal devrait avoir des actions qui ressemblent à ça :</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">todo_params</span><span class="p">)</span>

    <span class="k">if</span> <span class="vi">@todo</span><span class="p">.</span><span class="nf">save</span>
      <span class="n">redirect_to</span> <span class="ss">action: :index</span><span class="p">,</span>
                  <span class="ss">flash: </span><span class="p">{</span> <span class="ss">notice: :successfully_saved</span> <span class="p">}</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="ss">:new</span><span class="p">,</span>
             <span class="ss">flash: </span><span class="p">{</span> <span class="ss">error: :could_not_be_saved</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>Dans cet extrait, le code des actions est canonique et ne contient aucune logique métier. Le code est simple et immédiatement compréhensible.</p>

<p>Pourtant, la logique métier associée n’est pas nécessairement évidente, mais elle sera implémentée dans le modèle et la logique d’affichage dans les vues.</p>

<p>Avec le temps, les évolutions successives vont avoir naturellement tendance à complexifier contrôleur pour différentes raisons :</p>

<ul>
  <li>Elles pourraient nécessiter de mettre à jour des modèles associés, et pour cela certains développeurs pourraient être tentés d’ajouter la configuration de ces associations (en créant par exemple un objet vide) dans le contrôleur pour faciliter l’affichage du formulaire.</li>
  <li>On pourrait vouloir activer un comportement spécifique qui ne se traduit pas directement dans le modèle. Pour cela, on ajouterait un paramètre dans le formulaire indépendant de la structure du modèle, détecter sa valeur dans le contrôleur et exécuter une certaine logique.</li>
  <li>L’augmentation de la quantité de données amènera à vouloir utiliser des filtres (ou scopes) rendant les requêtes parfois complexes. Il faudra parfois appliquer ces filtres de façon conditionnelle. Si cette logique est ajoutée au contrôleur, cela peut très vite dégénérer.</li>
  <li>J’ai parfois vu des développeurs manquer de maîtrise face à un domaine complexe finir par enregistrer séparément certains objets du graphe. Je tiens à préciser que cela qui peut entraîner des incohérences dans les données. Généralement la bonne utilisation des associations et des formulaires imbriqués permet d’éviter cela.</li>
  <li>La liste est interminable : je pense aussi à l’envoi de mails ou autres notifications, des actions non conformes au standard <a href="https://medium.com/podiihq/understanding-rails-routes-and-restful-design-a192d64cbbb5">REST</a> pour gérer des autocomplete, etc…</li>
</ul>

<p>La vue n’échappe pas non plus à la complexité. L’ajout de comportements interactifs nécessite souvent l’intégration de code JavaScript, par exemple via des contrôleurs Stimulus, dont la configuration peut encombrer et compliquer la lecture du code. L’utilisation de classes CSS utilitaires ou le recours à des données JSON pour la communication avec le serveur (plutôt que d’employer des formulaires standard et Turbo) peut également contribuer à cette complexité. Parfois, il serait plus judicieux d’adapter la structure du formulaire et d’utiliser Turbo. D’autres exemples de complexité incluent le code redondant ou similaire, ainsi que des formulaires conçus en fonction des demandes métiers mais sans prendre en compte la structure des données existante.</p>

<h1 id="les-solutions">Les solutions</h1>

<p>Il est en fait relativement simple de résoudre ces problèmes en utilisant les outils fournis par Rails depuis le début. La solution repose sur la maîtrise de quelques fonctionnalités essentielles de Rails :</p>

<ul>
  <li>Les FormBuilders</li>
  <li>Les associations</li>
  <li>Les <a href="https://guides.rubyonrails.org/action_view_helpers.html">helpers</a></li>
  <li>Les <a href="https://guides.rubyonrails.org/active_record_callbacks.html">callbacks</a></li>
  <li>La <a href="https://codefol.io/posts/How-Does-Rack-Parse-Query-Params-With-parse-nested-query/">gestion des paramètres HTTP</a> dans les contrôleurs et les modèles.</li>
</ul>

<h3 id="des-formulaires-rails-pour-gérer-toute-linteractivité">Des formulaires Rails pour gérer toute l’interactivité</h3>

<p>Les associations dans Rails sont extrêmement puissantes. Certains développeurs voient les formulaires comme quelque chose d’un peu compliqué à manipuler, pas très flexibles. En réalité toute interaction entre le navigateur et le serveur peut être réalisée avec un formulaire.</p>

<p>Un des freins à l’utilisation d’un formulaire que j’ai pu observer, c’est le fait de considérer un formulaire comme un simple <a href="https://fr.wikipedia.org/wiki/CRUD#:~:text=L'acronyme%20informatique%20anglais%20CRUD,informations%20en%20base%20de%20données.">CRUD</a>. En gros, le <a href="https://guides.rubyonrails.org/command_line.html#bin-rails-generate">scaffold</a> de Rails. C’est à dire : on crée un formulaire qui reprend les champs d’une table et on enregistre ça en base de données.</p>

<p>Mais en utilisant les formulaires pour jongler avec les associations, on peut modéliser n’importe quelle interaction avec le serveur. En y ajoutant Hotwire, l’utilisateur n’a même plus conscient d’avoir affaire à des formulaires qui deviennent un simple détail technique.</p>

<p>Évidemment, je caricature un peu, en réalité, vous connaissez probablement <code class="language-plaintext highlighter-rouge">fields_for</code> pour gérer les associations. <code class="language-plaintext highlighter-rouge">fields_for</code> est une méthode Rails qui permet de créer des champs de formulaire pour les objets associés. Cela facilite ainsi la gestion des relations complexes entre modèles. <code class="language-plaintext highlighter-rouge">fields_for</code> peut être utilisé par exemple dans un formulaire d’édition d’une commande pour saisir plusieurs articles associés.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="sx">%= form_for @order do |f| %&gt;
  &lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= f.text_field :name %&gt;

  &lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">fields_for</span> <span class="ss">:items</span> <span class="k">do</span> <span class="o">|</span><span class="n">fi</span><span class="o">|</span> <span class="sx">%&gt;
    &lt;%= fi.label :name %&gt;</span>
    <span class="o">&lt;</span><span class="sx">%= fi.text_field :name %&gt;

    &lt;%=</span> <span class="n">fi</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:quantity</span> <span class="o">%&gt;</span>
    <span class="o">&lt;</span><span class="sx">%= fi.number_field :quantity %&gt;

    &lt;%# Mise à jour des objets existants %&gt;
    &lt;%=</span> <span class="n">fi</span><span class="p">.</span><span class="nf">hidden_field</span> <span class="ss">:id</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>

  <span class="o">&lt;</span><span class="sx">%= f.submit %&gt;
&lt;% end %&gt;
</span></code></pre></div></div>

<h3 id="la-complexité-de-fields_for">La complexité de fields_for</h3>

<p>Utiliser <code class="language-plaintext highlighter-rouge">fields_for</code> peut paraître un peu fastidieux dans un formulaire au premier abord car il y a plusieurs cas à prendre en compte :</p>

<ul>
  <li>L’affichage et la mise à jour des objets déjà enregistrés en base de données.</li>
  <li>La possibilité de créer un ou plusieurs nouveaux objets.</li>
</ul>

<p>ActiveRecord permet de rendre cela quasiment transparent mais gérer un objet déjà persisté et un objet qui ne l’est pas encore ce n’est pas la même chose. Même si Rails est puissant, les développeurs doivent quand même toujours avoir en tête certaines subtilités pour éviter de s’emmêler les pinceaux et parfois même de jeter l’éponge et finir par bricoler dans le contrôleur pour le faire marcher.</p>

<p>Certaines de ces subtilités peuvent véritablement vous pourrir la vie si vous passez à côté, vous en connaissez probablement certaines. Je pense en particulier à l’oubli du champ caché pour mettre à jour une association. Attention dans ce cas à bien filtrer les objets mis à jour pour la sécurité, pour cela dans le modèle, utilisez <code class="language-plaintext highlighter-rouge">reject_if</code> pour vérifier que les objets mis à jour font bien partie de l’association existante ou qu’ils ne sont pas encore en base… Une autre est d’oublier de configurer <code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code> dans le modèle.</p>

<p>Il y en a encore d’autres, et la confusion augmente quand elles se multiplient.</p>

<h3 id="gérer-les-associations-avec-des-cases-à-cocher-et-_destroy-sans-complexifier-le-contrôleur">Gérer les associations avec des cases à cocher et _destroy sans complexifier le contrôleur</h3>

<p>Une fois qu’on a son formulaire avec un objet et ses associations, on peut déjà traiter beaucoup plus de cas.</p>

<p>Mais cela devient encore plus intéressant lorsqu’on casse l’équivalence entre le stockage des données et le formulaire.</p>

<p>Par exemple, si vous avez une application de vente en ligne (Prenons un modèle <code class="language-plaintext highlighter-rouge">Commande</code> avec une association <code class="language-plaintext highlighter-rouge">has_many :services</code>). Lorsque vous commandez vous voulez simplement choisir les services qui vous intéressent en les activant ou pas avec une case à cocher (ou un toggle).</p>

<p>Une approche naïve pourrait consister à ajouter des attributs supplémentaires dans le formulaire, puis côté contrôleur à récupérer les paramètres et créer/supprimer les services correspondants.</p>

<p>Pour éviter de mettre ce code dans le contrôleur, on peut créer les accesseurs correspondants dans le modèle (ou dans un <a href="https://jetthoughts.com/blog/cleaning-up-your-rails-views-with-view-objects-development/">View Object</a> vu que c’est de la logique de vue et pas de la logique métier). Ça serait plus propre et ça marcherait tout aussi bien.</p>

<p>Cette approche fonctionne bien évidemment, mais implique d’écrire pas mal de logique de plomberie qui n’a pas vraiment de valeur métier.</p>

<p>L’utilisation de la propriété <code class="language-plaintext highlighter-rouge">_destroy</code> sur l’association permet de résoudre ces problèmes. Il y a tout de même un peu de logique pour initialiser tous les services disponibles pour la commande avec les bons paramètres, ensuite il faut positionner <code class="language-plaintext highlighter-rouge">_destroy</code> à true pour ne pas activer le service par défaut (opt-in), et ne pas le positionner pour un service à activer par défaut (opt-out). On peut le faire côté modèle avec un callback <code class="language-plaintext highlighter-rouge">after_initialize</code>, probablement de façon conditionnelle de cette façon <code class="language-plaintext highlighter-rouge">Commande.new(build_services: true)</code> . <code class="language-plaintext highlighter-rouge">build_services</code> étant un <code class="language-plaintext highlighter-rouge">attr_accessor</code> qui permet d’indiquer si on souhaite activer le callback.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Commande</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:services</span>

  <span class="n">accepts_nested_attributes_for</span> <span class="p">\</span>
    <span class="ss">:services</span><span class="p">,</span>
    <span class="ss">allow_destroy: </span><span class="kp">true</span>
    <span class="ss">reject_if: :belongs_to_foreign_record?</span>

  <span class="nb">attr_accessor</span> <span class="ss">:build_services</span>
  <span class="n">after_initialize</span> <span class="ss">:build_services_records</span><span class="p">,</span> <span class="ss">if: :build_services</span>

  <span class="k">def</span> <span class="nf">build_services_records</span>
    <span class="no">Service</span><span class="o">::</span><span class="no">KINDS</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">kind</span><span class="o">|</span> <span class="n">services</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">kind</span><span class="p">:)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">belongs_to_foreign_record?</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
    <span class="n">attributes</span><span class="p">[</span><span class="s1">'id'</span><span class="p">].</span><span class="nf">present?</span> <span class="o">&amp;&amp;</span>
      <span class="n">services</span><span class="p">.</span><span class="nf">ids</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="n">attributes</span><span class="p">[</span><span class="s1">'id'</span><span class="p">].</span><span class="nf">to_i</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Le contrôleur est un peu moins canonique, mais en vrai ça va. Même si on spécifie un paramètre, cette approche évite que le contrôleur n’ait connaissance des détails d’implémentation du modèle (si on oublie strong_parameters).</p>

<p>Côté vue, on s’en sort avec un <code class="language-plaintext highlighter-rouge">f.fields_for :services</code> . Et on affiche la case à cocher qui correspond à <code class="language-plaintext highlighter-rouge">_destroy</code> mais en l’inversant avec un petit du CSS (quand <code class="language-plaintext highlighter-rouge">_destroy</code> vaut true, la case sera désactivée et inversement).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="sx">%= f.fields_for :services do |fs| %&gt;
  &lt;%=</span> <span class="n">fs</span><span class="p">.</span><span class="nf">hidden_field</span> <span class="ss">:id</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= fs.check_box :_destroy %&gt;
&lt;% end %&gt;
</span></code></pre></div></div>

<p>Quand le contrôleur renvoie des paramètres du formulaire dans le modèle, les associations qui ont <code class="language-plaintext highlighter-rouge">_destroy</code> à true sont supprimées. Et donc seuls les services activés seront associés à la commande.</p>

<p>Voilà, c’était juste pour vous montrer un exemple de ce qu’on peut faire en tordant un peu la logique de Rails.</p>

<p>Cela peut paraître un peu anodin, mais ce type d’approche permet de limiter le code superflu (bloat). Ça permet de réaliser des fonctionnalités complexes en conservant un code relativement simple à comprendre. Même si la logique peut paraître un peu tordue, comme ces patterns peuvent être appliqués dans différentes situations, l’application peut grossir tout en conservant un code accessible même sans y avoir touché depuis longtemps.</p>

<p>Dans notre application, nous utilisons cette approche pour configurer les services associés à une commande. Cela nous a permis de supprimer beaucoup de code dans la vue et de simplifier nos contrôleurs.</p>

<h3 id="suppression-des-redondances-grâce-un-formbuilder-personnalisé">Suppression des redondances grâce un FormBuilder personnalisé</h3>

<p>ActiveAdmin utilise <code class="language-plaintext highlighter-rouge">formtastic</code> pour générer les formulaires. Vous savez, c’est la syntaxe un peu bizarre mais très concise qui permet de créer les formulaires dans ActiveAdmin, vous vous êtes peut-être déjà battu avec si vous avez eu besoin de les personnaliser.</p>

<p>Vous connaissez peut-être aussi <code class="language-plaintext highlighter-rouge">simple_form</code> qui est un autre form builder.</p>

<p>Mais en réalité avoir votre propre form builder dans votre application vous permettra d’avoir des vues épurées.</p>

<p>L’avantage est que plutôt que de vous adapter aux choix faits par le créateur du form builder et éventuellement finir par vous battre avec, vous pouvez l’adapter aux besoins de votre application, et ce n’est pas vraiment compliqué à faire.</p>

<p>Souvent, vous avez une manière générique d’écrire vos formulaires, vous appliquez une mise en page un style similaire sur à peu près vos formulaires (ou à la limite vous jonglez avec quelques styles différents).</p>

<p>Par exemple, vous utilisez un label, puis votre champ, vous l’encapsulez dans une div, éventuellement avec quelques classes CSS (si vous êtes adepte de Tailwind ou pas si vous préférez l’approche semantic HTML/CSS).</p>

<p>Les helpers par défaut de Rails se contentent de répliquer les champs du HTML en les hydratant avec ActiveRecord. Donc si vous vous contentez des helpers de Rails, vos vues seront verbeuses et répétitives. Systématiquement, vous aurez votre div et ses classes, avec le label et le champ dedans.</p>

<p>Dans votre FormBuilder, vous allez pouvoir surcharger les helpers de Rails (ou en créer d’autres à côté) pour qu’ils génèrent tout d’un coup. Vos vues sont ainsi beaucoup plus épurées. Si vous avez besoin de faire une version différente, vous pouvez toujours ajouter un autre helper, ou bien ajouter des options supplémentaires sur votre helper.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">ApplicationFormHelper</span>
  <span class="k">def</span> <span class="nf">semantic_form_with</span><span class="p">(</span><span class="ss">model: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">scope: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">url: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">format: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="n">merged_options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">builder: </span><span class="no">ApplicationFormBuilder</span> <span class="p">}.</span><span class="nf">merge</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
    <span class="n">form_with</span><span class="p">(</span><span class="n">model</span><span class="p">:,</span> <span class="n">scope</span><span class="p">:,</span> <span class="n">url</span><span class="p">:,</span> <span class="nb">format</span><span class="p">:,</span> <span class="o">**</span><span class="n">merged_options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ApplicationFormBuilder</span> <span class="o">&lt;</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">FormBuilder</span>
  <span class="k">def</span> <span class="nf">text_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="n">_wrapped_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="k">super</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
    <span class="n">_wrapped_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">object</span><span class="p">.</span><span class="nf">public_send</span><span class="p">(</span><span class="nb">method</span><span class="p">))</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">_wrapped_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="vi">@template</span><span class="p">.</span><span class="nf">content_tag</span><span class="p">(</span><span class="ss">:p</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@template</span><span class="p">.</span><span class="nf">safe_join</span> <span class="p">[</span><span class="n">label</span><span class="p">(</span><span class="nb">method</span><span class="p">),</span> <span class="n">value</span><span class="p">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Ensuite, reste le problème de vos contrôleurs Stimulus, la syntaxe Stimulus peut être particulièrement verbeuse et si elle est relativement simple à écrire, sa lecture se révèle parfois assez indigeste.</p>

<p>Par exemple, si vous voulez ajouter/retirer dynamiquement un objet dans une association vous voudrez par exemple utiliser <code class="language-plaintext highlighter-rouge">nested-form</code> de <a href="https://www.stimulus-components.com">Stimulus Component</a>. La syntaxe est relativement simple, mais elle pourrait être simplifiée :</p>

<ul>
  <li>Il faut ajouter des attributs data sur la balise du formulaire pour activer la fonctionnalité</li>
  <li>Configurer le template implique beaucoup de balises</li>
</ul>

<p>En ajoutant un helper (qui pourrait s’utiliser avec <code class="language-plaintext highlighter-rouge">f.has_many :items</code> par exemple), vous pourrez :</p>

<ul>
  <li>Créer automatiquement un <code class="language-plaintext highlighter-rouge">fieldset</code> avec une légende par défaut</li>
  <li>Appeler <code class="language-plaintext highlighter-rouge">fields_for</code> avec les bons paramètres automatiquement</li>
  <li>Configurer le contrôleur Stimulus</li>
  <li>Ajouter les boutons d’ajout/suppression au bon endroit ainsi l’appelant pourra se contenter de définir les champs à afficher.</li>
</ul>

<p>Vous pouvez bien sûr appliquer cette logique de création d’helpers avec tous les contrôleurs Stimulus de votre application (qu’ils soient dans des formulaires ou non), si bien que vos vues devraient gagner encore en lisibilité.</p>

<h3 id="les-associations-dans-activerecord">Les associations dans ActiveRecord</h3>

<p>Une des clés pour éviter les prises de tête lors de la création de formulaires dans Rails est de bien comprendre et maîtriser un certain nombre de concepts :</p>

<ul>
  <li>Le format des paramètres dans Rack (comment on passe des paramètres à un hash d’options)</li>
  <li>Comment les associations sont gérées en mode persisté et en mode non persisté. Rails est en effet capable de naviguer dans un graphe d’associations qu’elles soient persistées ou non. Mais il y a des différences entre les deux. La magie de Rails a ses limites.</li>
  <li>Bien comprendre le système de transaction en base de données. La clé réside dans une seule règle simple : une action de contrôleur = un seul save. Il faut bien comprendre qu’un save dans Rails permet d’enregistrer tout un graphe d’objet dans une transaction. Vous n’avez pas besoin de gérer la transaction manuellement avec un bloc ou quoi que ce soit, tout ce qu’il faut faire c’est construire votre formulaire de sorte à ce qu’il contienne tous les objets à enregistrer via les associations.</li>
</ul>

<h2 id="la-persistance-des-associations-dans-activerecord">La persistance des associations dans ActiveRecord</h2>

<p>Pour comprendre comment un formulaire doit être écrit pour fonctionner comme je veux, je commence généralement par faire un tour dans la console Rails.</p>

<p>On crée un nouvel objet avec les paramètres attendus dans le formulaire, on parcourt le graphe, on enregistre et si tout fonctionne comme prévu, on réplique la structure utilisée dans un formulaire.</p>

<p>Quand on fait des associations plus complexes, avec des scopes par exemple ou des <a href="https://edgeguides.rubyonrails.org/association_basics.html#polymorphic-associations">associations polymorphiques</a> on peut parfois avoir des <a href="https://stackoverflow.com/questions/35104876/why-are-polymorphic-associations-not-supported-by-inverse-of">surprises</a>.</p>

<p>Souvent ça ne pose pas de problème en pratique, mais parfois, on se retrouve à devoir faire de la configuration à la main.</p>

<p>Gardez vos associations le plus simple possible car certaines combinaisons ne fonctionnent pas correctement dans Rails.</p>

<p>Dans le cas ci-dessous, on peut voir que la configuration de l’association ne permet pas de récupérer l’inverse quand l’association n’est pas encore persistée. On peut le comprendre facilement vu que le scope est une requête sur la DB et n’est donc pas exécuté pour une association non persistée.</p>

<p>Si vous avez déjà un <code class="language-plaintext highlighter-rouge">has_many :items</code> et que vous voulez ajouter <code class="language-plaintext highlighter-rouge">has_one :special_item, -&gt; { where(kind: :special) }</code> de la même classe qu’<code class="language-plaintext highlighter-rouge">items</code>, l’association ne va pas fonctionner correctement pour les associations non persistées. Ce qui peut parfois poser des problèmes dans certains cas d’utilisation.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># On crée une nouvelle todo avec un item et un item spécial</span>
<span class="o">&gt;</span>  <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
     <span class="ss">items_attributes: </span><span class="p">[{}],</span>
     <span class="ss">special_item_attributes: </span><span class="p">{}</span>
   <span class="p">)</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Todo id: nil, name: nil&gt;</span>

<span class="c1"># L'item est bien lié à la todo via l'association inverse</span>
<span class="o">&gt;</span>  <span class="n">todo</span><span class="p">.</span><span class="nf">items</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">todo</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Todo id: nil, name: nil&gt;</span>

<span class="c1"># Mais pas l'item spécial</span>
<span class="o">&gt;</span>  <span class="n">todo</span><span class="p">.</span><span class="nf">special_item</span><span class="p">.</span><span class="nf">todo</span>
<span class="o">=&gt;</span> <span class="kp">nil</span>
</code></pre></div></div>

<p>Quand un comportement d’ActiveRecord ne fonctionne pas comme attendu, il ne faut pas hésiter à consulter le code qui gère l’association pour comprendre d’où vient le problème.</p>

<p>Dans ces cas-là j’utilise <a href="https://ruby-doc.org/core-2.4.6/Method.html#method-i-source_location">source_location</a> pour trouver facilement le code utilisé lors de l’appel de l’association. Cette méthode renvoie le fichier source et le numéro la ligne où est définie la méthode. Par exemple :</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">method</span><span class="p">(</span><span class="ss">:has_many</span><span class="p">).</span><span class="nf">source_location</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"gems/activerecord-7.2.1.1/lib/active_record/associations.rb"</span><span class="p">,</span> <span class="mi">1268</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">instance_method</span><span class="p">(</span><span class="ss">:items</span><span class="p">).</span><span class="nf">source_location</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"gems/activerecord-7.2.1.1/lib/active_record/associations/builder/association.rb"</span><span class="p">,</span> <span class="mi">103</span><span class="p">]</span>
</code></pre></div></div>

<p>Comprendre les détails d’implémentation permet de concevoir des fonctions intégrées avec ActiveRecord. Cela permet d’ajouter sa propre magie dans son application et d’avoir des fonctions qui paraissent faire partie de Rails.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Les applications Rails peuvent être complexes et l’approche pragmatique du framework mène parfois à des problèmes d’organisation du code. En utilisant les techniques exposées dans cet article, vous pourrez conserver des vues et des contrôleurs très simples et très lisibles. Cette problématique existe également pour gérer la complexité des modèles, mais nous aborderons cette problématique dans un futur article.</p>]]></content><author><name></name></author><category term="Rails" /><category term="ActionController" /><category term="ActionView" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Exports asynchrones dans ActiveAdmin</title><link href="/rails/activeadmin/2024/04/25/exports-csv-asynchrones-activeadmin.html" rel="alternate" type="text/html" title="Exports asynchrones dans ActiveAdmin" /><published>2024-04-25T19:37:00+00:00</published><updated>2024-04-25T19:37:00+00:00</updated><id>/rails/activeadmin/2024/04/25/exports-csv-asynchrones-activeadmin</id><content type="html" xml:base="/rails/activeadmin/2024/04/25/exports-csv-asynchrones-activeadmin.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>L’exportation de données est une fonctionnalité présente dans la plupart
des applications d’entreprise. ActiveAdmin propose une fonctionnalité d’export
par défaut, cette fonctionnalité fonctionne de manière synchrone, c’est à dire
que la génération des données se fait au moment de la demande du client.</p>

<h1 id="le-problème-des-exports-synchrones">Le problème des exports synchrones</h1>

<p>Cependant, lorsque le volume de données à exporter est important,
le traitement peut prendre du temps. Le serveur étant occupé il n’est pas disponible
pour traiter les demandes qui s’empilent, ce qui entraine un embouteillage.
Les performances se dégradent et les utilisateurs constatent que l’application
est lente.</p>

<p>Si la situation se dégrade, le bouchon devient alors trop important,
et le serveur n’est plus en mesure de les requêtes dans les délais. L’application
se met alors à renvoyer des erreurs. Si la situation continue à se détériorer,
l’application cesse alors complètement de fonctionner et devient inaccessible.</p>

<h1 id="mise-en-place-dune-solution-asynchrone">Mise en place d’une solution asynchrone</h1>

<p>Confrontés à ce type de problème, nous avons utilisé
la gem <a href="https://github.com/rootstrap/activeadmin-async_exporter"><code class="language-plaintext highlighter-rouge">activeadmin-async_exporter</code></a>
pour y remédier. Cette librairie permet de générer des exports de données
dans ActiveAdmin de manière asynchrone avec ActiveJob. Cependant, nous avons
dû faire des adaptations pour pouvoir utiliser cette solution.</p>

<p>Tout d’abord, la gem <code class="language-plaintext highlighter-rouge">activeadmin-async_exporter</code> n’est plus maintenue
par son auteur et n’était pas compatible avec notre version de Rails.
Nous avons donc du la modifier et mettre à jour ses dépendances.</p>

<p>Nous avons faits quelques adaptations supplémentaires afin de gérer les
paramètres avec strong_parameters et résoudre un problème
de méthode manquante due à l’utilisation de <code class="language-plaintext highlighter-rouge">current_user</code> dans notre application
alors que l’auteur gem utilise <code class="language-plaintext highlighter-rouge">current_admin_user</code>.</p>

<p>Contrairement à notre application, la gem n’utilise pas ActiveStorage
pour les pièces jointes. Nous avons donc également adapté cette partie.</p>

<p>Pour enregistrer la demande, la gem fournit un générateur pour la migration
pour créer les tables nécessaire en base de données. La gem fournit également
un générateur ActiveAdmin pour l’interface permettant de gérer les exports.
Cependant, ces générateurs ne sont pas documentés.</p>

<p>Nous avons donc finalement repris le code de la gem directement dans notre
application et nous l’avons personnalisé selon nos besoins.</p>

<h1 id="publication-dans-une-gem">Publication dans une gem</h1>

<p>Nous avons décidé de ne pas publier nos modifications sous forme d’une nouvelle gem
car le code est intégré à notre application, et cela demanderait un nouvel effort d’adaptation.
Par ailleurs, vu le peu d’activité sur cette librairie, je ne suis pas convaincu
que cette solution réponde forcément à un besoin de la communauté. Même si ça s’est
révélé très utile pour améliorer les performances de notre application.</p>

<p>Néanmoins si ces modifications vous intéressent, si vous avez des questions
ou des commentaires n’hésitez pas à me contacter pour en savoir plus.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Cette anecdote illustre au travers d’un exemple concret le type problématique
qui peut se poser au cours de l’évolution d’une application. La solution basée
sur l’utilisation et l’adaptation d’une gem peu populaire et non maintenue
peut sembler atypique, mais cette approche suit en réalité un processus très classique
de résolution d’un problème technique.</p>]]></content><author><name></name></author><category term="Rails" /><category term="ActiveAdmin" /><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>