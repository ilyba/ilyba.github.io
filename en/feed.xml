<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-12-07T09:35:28+00:00</updated><id>/feed.xml</id><title type="html">ILYBA</title><subtitle>Développement d&apos;applications Web et mobile</subtitle><entry><title type="html">Install PostgreSQL: Homebrew vs. Docker vs. Postgres.app</title><link href="/postgresql/homebrew/docker/2024/11/26/installer-postgresql-homebrew-vs-docker-vs-postgres-app.html" rel="alternate" type="text/html" title="Install PostgreSQL: Homebrew vs. Docker vs. Postgres.app" /><published>2024-11-26T06:00:00+00:00</published><updated>2024-11-26T06:00:00+00:00</updated><id>/postgresql/homebrew/docker/2024/11/26/installer-postgresql-homebrew-vs-docker-vs-postgres-app</id><content type="html" xml:base="/postgresql/homebrew/docker/2024/11/26/installer-postgresql-homebrew-vs-docker-vs-postgres-app.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>The installation of PostgreSQL can be carried out in several ways. In this article, we will explore the advantages and disadvantages of different installation methods to determine which one will best meet your specific needs.</p>

<p>Understanding the distinctions between installations intended for a production environment and those designed for development is crucial, as each context has its own challenges and priorities.</p>

<p>We will start with general considerations on production environments, before delving more deeply into the different installation alternatives in the context of a development environment.</p>

<h1 id="installing-postgresql-in-production">Installing PostgreSQL in Production</h1>

<p>Choosing the right way to install PostgreSQL in a production environment is essential to ensure the performance, security, and robustness of your application. Although this overview does not cover all possibilities, it aims to clarify your choices and guide you toward the most suitable option for your specific needs. I will particularly explain the differences between using managed databases and installing on your own dedicated servers.</p>

<h2 id="using-a-managed-database-service">Using a Managed Database Service</h2>

<p>For many projects, especially those that are just starting, opting for a managed database instance is often the most obvious choice. Here are the major advantages of this approach:</p>

<ul>
  <li><strong>Ease of Deployment:</strong> Easy to set up, often with one click, secure and optimized by default. No need for manual or technical installation procedures.</li>
  <li><strong>Immediate Availability:</strong> The database is usually available after a few tens of seconds.</li>
  <li><strong>Facilitated Maintenance:</strong> Updates and maintenance are managed by the provider.</li>
  <li><strong>Simplified Integration:</strong> The connection URL can be simply added to your application.</li>
  <li><strong>Automated Backups:</strong> This service is generally also managed by the provider.</li>
  <li><strong>Advanced Features:</strong> Access to options like redundancy.</li>
  <li><strong>Time Saving:</strong> Allows a focus on development, especially at the start of the project.</li>
</ul>

<p>However, there are some disadvantages:</p>

<ul>
  <li><strong>Increasing Cost:</strong> The cost can become prohibitive as your needs increase (in practice: you upgrade your database with larger instances and it costs more).</li>
  <li><strong>Complexity of Migration:</strong> Once your database has become large, migration to another provider will be more complex, more expensive, and will require more downtime for your application.</li>
  <li><strong>Limited Control:</strong> You will not have direct control over the server and may not have access to all options.</li>
  <li><strong>Necessary Knowledge:</strong> An understanding of the internal operating details of the database will still be needed to maintain good performance as the volume of data in the database increases.</li>
  <li><strong>Dependence on the Provider:</strong> Dependence on the provider, which can be a valuable help but also a point of blockage in case of problems.</li>
</ul>

<p>For example, our company initially opted for a managed database service. However, after an incident, we realized that the lack of control made migration to another (also a managed service) provider more complex than anticipated, which led us to consider an internally managed solution.</p>

<p>In conclusion, this solution is suitable for simple needs. Consider your immediate needs versus your budget. As your application evolves, assess if the cost and lack of control justify an alternative.</p>

<h2 id="installation-on-a-dedicated-server">Installation on a Dedicated Server</h2>

<p>Installing PostgreSQL on a server under your administration is another viable option. This can be done via Docker or a classic installation, depending on your preferences and familiarity with these technologies. Here are some distinctions to take into account:</p>

<ul>
  <li><strong>Maintenance with Docker:</strong> Using Docker adds an extra maintenance layer, requiring the management of Docker updates alongside PostgreSQL updates.</li>
  <li><strong>Preconfigured Images:</strong> Docker offers ready-to-use images, simplifying the initial setup compared to manual installation.</li>
  <li><strong>Ease of Use:</strong> For those less familiar with Docker, a classic installation might be more intuitive.</li>
  <li><strong>Integration with Existing Infrastructure:</strong> If Docker is already present for other services in your system, integrating PostgreSQL through Docker will allow you to harmonize your configuration.</li>
</ul>

<p>The two approaches are comparable in terms of resources and security. This solution is ideal for applications requiring high performance and a specific configuration, for example, if your needs include extensions not supported by managed services. Although potentially less costly than some managed services in terms of service fees, it requires continuous investment to maintain the system’s security and proper functioning. And you will not have an external contact in case of a problem.</p>

<p>This solution is recommended for growing businesses with the resources necessary for internal maintenance. It is crucial that your team has the required skills while planning a budget for continuous training. Sustained commitment is essential for regular updates, maintenance, and optimization.</p>

<h1 id="postgresql-for-developers">PostgreSQL for Developers</h1>

<p>In my recent research on PostgreSQL, I have often noticed a recommendation for installation via Postgres.app. Personally, I found that using Homebrew suited me perfectly.</p>

<p>I will focus here on the Mac environment, although the concepts discussed can easily be adapted to other operating systems. This reflection aims to offer developers a better understanding of the options available and to help them choose based on their work environment and software preferences.</p>

<h2 id="with-postgresapp">With Postgres.app</h2>

<p>Installation via Postgres.app has several notable advantages:</p>

<ul>
  <li><strong>Graphical Interface:</strong> Although basic, it provides extra comfort in interacting with databases.</li>
  <li><strong>Standalone Installation:</strong> All necessary dependencies are integrated, avoiding additional installations.</li>
  <li><strong>Version Flexibility:</strong> Allows installing and running multiple PostgreSQL versions simultaneously, facilitating testing and development on different versions.</li>
</ul>

<p>Thus, for developers who are not already relying on Homebrew, Postgres.app often proves to be the most sensible choice, simplifying experimentation and development.</p>

<h2 id="with-homebrew">With Homebrew</h2>

<p>One of the <a href="https://chrisrbailey.medium.com/postgres-on-mac-skip-brew-use-postgres-app-dda95da38d74">often mentioned disadvantages</a> of installing PostgreSQL via Homebrew is that it automatically updates packages. This poses two major issues: first, local major version updates can cause divergence from the production environment, while it is essential to keep development and production environments as similar as possible. Secondly, a major upgrade might render the storage format used incompatible, thus preventing the database from starting.</p>

<p>However, Homebrew offers simple solutions to avoid this problem. You can specify the major version to use with <code class="language-plaintext highlighter-rouge">@</code> and <code class="language-plaintext highlighter-rouge">brew link</code>. You can also pin the minor version if desired with the <code class="language-plaintext highlighter-rouge">pin</code> command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>postgresql@17
brew pin postgresql@17
brew <span class="nb">link </span>postgresql@17
</code></pre></div></div>

<p>By applying these commands, you ensure that your local environment precisely reflects the version of your production environment, thereby reducing compatibility issues.</p>

<p>By applying these commands, you ensure that your local environment accurately reflects the version of your production environment, thereby reducing the risks of compatibility issues. You’ll also avoid the inconveniences related to Homebrew’s automatic major version updates that can prevent PostgreSQL from starting.</p>

<h2 id="configuration-in-rails">Configuration in Rails</h2>

<p>Whether you use Homebrew or Postgres.app, integrating PostgreSQL into an application (Rails in the example) requires no configuration. The default rights, while not adhering to best practices for a production deployment, pose no problem for development. Here is an illustration of my <code class="language-plaintext highlighter-rouge">database.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">default</span><span class="pi">:</span> <span class="nl">&amp;default</span>
  <span class="na">adapter</span><span class="pi">:</span> <span class="s">postgresql</span>
  <span class="na">encoding</span><span class="pi">:</span> <span class="s">unicode</span>
  <span class="c1"># For details on connection pooling, see Rails configuration guide</span>
  <span class="c1"># http://guides.rubyonrails.org/configuring.html#database-pooling</span>
  <span class="na">pool</span><span class="pi">:</span> <span class="s">&lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;</span>

<span class="na">development</span><span class="pi">:</span>
  <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*default</span>
  <span class="na">database</span><span class="pi">:</span> <span class="s">myapp_development</span>
</code></pre></div></div>

<p>This is exactly the default configuration generated by Rails upon application creation, simply by choosing to configure PostgreSQL as the database, without any modification. After that, I can create the database:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails new myapp <span class="nt">--database</span><span class="o">=</span>postgresql
bin/setup
</code></pre></div></div>

<p>Then, the connection to the database is simply made via:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails db
</code></pre></div></div>

<p>And my application works without having to configure anything on the PostgreSQL side. No user to create or anything.</p>

<p>One thing not to forget with Postgres.app, to use the command-line tools, <a href="https://postgresapp.com/documentation/cli-tools.html">make sure to add the appropriate path to your shell’s <code class="language-plaintext highlighter-rouge">PATH</code> variable</a>.</p>

<h2 id="with-docker">With Docker</h2>

<p>Integrating PostgreSQL with Docker in your development presents a potential alternative to consider.</p>

<p>If your environment is already based on Docker and you are comfortable with its configuration, just like in production, it’s a good option. However, this requires the installation of Docker, which could cause performance issues on Mac. To avoid these problems, you can use an alternative like OrbStack instead of Docker Desktop.</p>

<p>The installation via Docker will be very advantageous if your configuration already uses it, as it will allow you to start all your services alongside it. If you haven’t particularly invested in Docker, Postgres.app or Homebrew might be better alternatives.</p>

<p>Finally, with Docker, it is possible to use the simplified application configuration described earlier, but this will depend on the configuration with which Docker has installed PostgreSQL.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Ultimately, the choice of the PostgreSQL installation method should be guided by a thorough analysis of your specific needs in terms of performance, security, and resource management. A developer working on a small project will not have the same expectations as a company managing a complex application.</p>

<p>Before making a decision, evaluate the potential growth of your project. Choose a solution that not only meets your current needs but also adapts to its future evolution.</p>

<p>For project startups or individual developers, a managed database can provide considerable comfort. Conversely, companies with specific performance requirements and the necessary technical resources will often prefer an installation on a dedicated server or via Docker.</p>

<p>There is no universal solution that is superior to the others in all cases. By carefully evaluating these factors, you can choose the PostgreSQL installation solution best suited to your environments. Adjust your choices over time to respond to your project’s developments.</p>]]></content><author><name></name></author><category term="PostgreSQL" /><category term="Homebrew" /><category term="Docker" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Why Continue Embrassing Progressive Enhancement in 2024?</title><link href="/rails/hotwire/stimulus/turbo/2024/11/05/pourquoi-continuer-a-faire-du-progressive-enhancement.html" rel="alternate" type="text/html" title="Why Continue Embrassing Progressive Enhancement in 2024?" /><published>2024-11-05T06:00:00+00:00</published><updated>2024-11-05T06:00:00+00:00</updated><id>/rails/hotwire/stimulus/turbo/2024/11/05/pourquoi-continuer-a-faire-du-progressive-enhancement</id><content type="html" xml:base="/rails/hotwire/stimulus/turbo/2024/11/05/pourquoi-continuer-a-faire-du-progressive-enhancement.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Progressive enhancement is a web design methodology that involves creating a minimalist and resilient version of a feature—meaning one that will be usable in a browser from the 2000s. Then, modern features are gradually layered over it.</p>

<p>To achieve this, start by writing a page with minimal and standard HTML code, and associate a CSS stylesheet with equally minimal and standard directives. You get a functional page that loads instantly, even with a poor connection and JavaScript disabled.</p>

<p>All non-essential functionalities that enhance user experience (fonts, interactive behaviors, visual effects) are added progressively, ensuring that the basic page functionality works even when these enhancements aren’t activated.</p>

<h1 id="the-state-of-the-art-in-2024">The State of the Art in 2024</h1>

<p>The generally accepted <a href="https://piccalil.li/blog/its-about-time-i-tried-to-explain-what-progressive-enhancement-actually-is/">motivation</a> in the literature for using progressive enhancement is to provide an acceptable user experience even in degraded conditions.</p>

<p>However, in 2024, it is entirely possible to launch a service without worrying about the experience of a small number of people in degraded conditions. This is why many developers for over 20 years have chosen technologies that require JavaScript to be enabled and generally require the download of a large amount of JavaScript before users can interact with the site.</p>

<p>This approach unquestionably allows for thriving business. And even if some users are left behind, it certainly won’t prevent your service from being a success.</p>

<p>While I am obviously committed to not leaving anyone behind in my developments, for me, that is not the most important reason to adopt this approach.</p>

<h1 id="the-reason-for-progressive-enhancement">The Reason for Progressive Enhancement</h1>

<p>The right reason is the one that will convince you or allow you to convince an entire team or executives to switch to this approach.</p>

<p>If you hope to convince all these people by telling them they can increase their target from 98% of users to 99%, you have little chance of convincing them unless it’s an already well-established multinational, where this might be the last lever for growth.</p>

<p>Even if you convince them that a major part of their users will occasionally encounter a poor experience (a thought for those using their phone on public transport), because they face degraded conditions, it won’t necessarily change their priorities.</p>

<p>But for me, the most interesting thing is that this technique leads to simpler and easier-to-maintain code.</p>

<h1 id="progressive-enhancement-improves-code">Progressive Enhancement Improves Code</h1>

<p>For me, the good reason is that this approach improves code quality and avoids a considerable number of problems in an application. That’s what I’m going to explain here.</p>

<blockquote>
  <p>Working in the actual deliverable’s medium — the web — in cycles/iterations/sprints, with progressive enhancement at the root will — I promise — result in smaller codebases, simpler UIs and happier users!</p>

  <p><a href="https://piccalil.li/author/andy-bell"><em>Andy Bell</em></a></p>
</blockquote>

<h2 id="it-reduces-the-amount-of-javascript">It Reduces the Amount of JavaScript</h2>

<p>To start, we’re going to use JavaScript only to enhance the existing experience.
Thus, this experience will be realized only with the standard features of the Web.
We’ll use <a href="/en/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails.html">links and forms</a>
by default to communicate with the server. For the majority of functionalities,
this will be sufficient, and nothing will need to be added
to achieve a satisfactory experience.</p>

<p>However, sometimes we’ll want to optimize the experience. Take, for example, a field with autocompletion.
The principle is to display a list of suggestions as you type.
<a href="https://gomakethings.com/how-to-create-an-autocomplete-input-with-only-html/">Such functionality <del>is unachievable without</del> often requires JavaScript</a>
as it needs to trigger a behavior with each input.
If server interaction is necessary, simple HTML is not enough.</p>

<p>However, implementing this type of functionality by following the principles of
progressive enhancement simplifies code architecture.</p>

<p>Imagine how such a feature might look without JavaScript.
We can display an input field and an initially empty suggestion list.
As the user types, they will want to consult the suggestions.
To do this, instead of displaying them instantly, the user can activate
a dedicated suggestion-loading button on the form to display them.
Without JavaScript, the entire page will reload with the list.
The user can then choose an item from the list and finalize the form.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:product</span>
  <span class="nb">attr_accessor</span> <span class="ss">:product_name</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">none</span> <span class="k">if</span> <span class="n">query</span><span class="p">.</span><span class="nf">blank?</span>

    <span class="n">where</span><span class="p">(</span><span class="s1">'name like :query'</span><span class="p">,</span> <span class="ss">query: </span><span class="s2">"</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="se">\%</span><span class="s2">"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">OrdersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@order</span> <span class="o">=</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:order</span><span class="p">].</span><span class="nf">permit!</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">params</span><span class="p">[</span><span class="ss">:commit</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="vi">@order</span><span class="p">.</span><span class="nf">save</span>
      <span class="n">redirect_to</span> <span class="vi">@order</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="ss">:new</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%=</span> <span class="n">form_with</span> <span class="ss">model: </span><span class="vi">@order</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;fieldset&gt;</span>
    <span class="nt">&lt;legend&gt;</span>Todo<span class="nt">&lt;/legend&gt;</span>

    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span>

    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">text_field</span> <span class="ss">:product_name</span><span class="p">,</span>
                     <span class="ss">list: </span><span class="s1">'product-suggestions'</span><span class="p">,</span>
                     <span class="ss">value: </span><span class="n">params</span><span class="p">.</span><span class="nf">dig</span><span class="p">(</span><span class="ss">:order</span><span class="p">,</span> <span class="ss">:product_name</span><span class="p">)</span> <span class="cp">%&gt;</span>

    <span class="nt">&lt;datalist</span> <span class="na">id=</span><span class="s">"product-suggestions"</span><span class="nt">&gt;</span>
      <span class="cp">&lt;%</span> <span class="no">Product</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="vi">@order</span><span class="p">.</span><span class="nf">product_name</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">product</span><span class="o">|</span> <span class="cp">%&gt;</span>
        <span class="cp">&lt;%=</span> <span class="n">content_tag</span> <span class="ss">:option</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="ss">value: </span><span class="n">product</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span>
      <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
    <span class="nt">&lt;/datalist&gt;</span>

    <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">submit</span> <span class="s1">'Search'</span><span class="p">,</span> <span class="ss">name: </span><span class="s1">'autocomplete'</span> <span class="cp">%&gt;</span>
  <span class="nt">&lt;/fieldset&gt;</span>

  <span class="cp">&lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">submit</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>We can then use JavaScript to enhance the experience. The advantage of using
this approach is that there will be very little JavaScript to add. By using
technologies like Hotwire Turbo, we don’t even need to add the JavaScript ourselves
but just a bit of configuration on the forms. JavaScript will hide the button and trigger behavior on input. This behavior involves
loading the list, then replacing the list on the current page. Loading the list
can be done by fetching the updated current page (thus not requiring
an update to the server part) or a partial version of the page containing
only the suggestions.</p>

<p>In our example, note that the controller requires no adaptation
to display product suggestions and only needs
to check if <code class="language-plaintext highlighter-rouge">params[:commit]</code> is defined to handle interactive behaviors
before validation.</p>

<p>Thus, we have shown how this approach can reduce the amount of JavaScript
in an application. We will now see how reducing JavaScript also
facilitates application maintenance.</p>

<h1 id="it-facilitates-code-maintenance">It Facilitates Code Maintenance</h1>

<p>In a Rails application, JavaScript code is more difficult and complex to test as it requires a web browser to run, in contrast to backend code, which runs natively on the server without a browser. This will also make tests longer to execute.</p>

<p>With progressive enhancement, the JavaScript code produced is more general, making it much easier to test. It has no dependencies on business logic so code is more likely to be reusable elsewhere in the application. This snowball effect of reusability further reduces the amount of JavaScript code. It’s a virtuous cycle.</p>

<p>Of course, JavaScript code (more precisely the code executed directly by the browser) is not inherently a problem, but its systematic use makes systems more complex. Reducing this complexity leads to improved maintainability of applications.</p>

<h1 id="a-second-example">A Second Example</h1>

<p>To automatically copy text to the clipboard, JavaScript is required.</p>

<p>However, we can design an equivalent feature without JavaScript. Namely: display the text to be copied and suggest the user copy the text themselves using their operating system’s functionality.</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@order</span><span class="p">.</span><span class="nf">product</span> <span class="cp">%&gt;</span>
  URL <span class="cp">&lt;%=</span> <span class="n">text_field_tag</span> <span class="s1">''</span><span class="p">,</span> <span class="n">url_for</span><span class="p">(</span><span class="vi">@order</span><span class="p">.</span><span class="nf">product</span><span class="p">)</span> <span class="cp">%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>This satisfies the user’s need. The proposed solution is extremely rudimentary but incredibly effective.</p>

<p>JavaScript can then be used to enhance the user experience of this basic feature by allowing the text selection and copying to be done automatically.</p>

<p>The principle is to (optionally) hide the text to be copied while keeping it in the page’s code and add a button to trigger the copy to the user’s clipboard and display a message confirming successful operation.</p>

<p>Thus, when JavaScript is not available, the site will display simple text and suggest the user copy the text with a message. The function remains accessible. Then, when JavaScript is available, the user will see a simple button to automatically copy the text.</p>

<p>In this example, the principle remains the same: create a functional base version without JavaScript and enhance the user experience by adding more interactivity with JavaScript. We see all the previously mentioned advantages: the function is always accessible, and the enhanced version is reusable, easily maintainable, and requires little additional code.</p>

<h1 id="the-more-complex-the-more-advantageous">The More Complex, the More Advantageous</h1>

<p>The previous example was extremely simple but sufficient to illustrate the interest of this approach.</p>

<p>Let’s push the example a little further by adding interactions with the server.</p>

<p>Now, our user will select a product from the database by its name (using the autocomplete function). The user then wants to copy the link to access this product to send it by email to a customer.</p>

<p>As in the first example, the user’s input will be sent to the server (via the form button or automatically), and the browser will retrieve a list of results.</p>

<p>The difference this time is when the user selects a result, we want to offer them the option to copy the link corresponding to that result.</p>

<p>To do this, we use the same approach and add a ‘Display Link’ button on the form to trigger the interaction. Once our product is selected, the user can activate this button, and the page will reload with the link to the product that the user can copy.</p>

<p>Here too, we can enhance the user experience by automatically triggering this behavior when the product is selected. The user will then see a button allowing them to copy the link to the clipboard.</p>

<p>Without JavaScript, the user utilizes the form buttons to trigger interactive behaviors. With JavaScript, behaviors are automatically triggered by user actions, making the experience more natural.</p>

<p>Note that in our approaches, we add these buttons to the existing form. It’s essential to do this so the server retrieves the information, ensuring that user input is preserved on the new page when it’s reloaded. With JavaScript, we can partially reload the page and circumvent the problem, but without JavaScript, page reloads are necessary.</p>

<p>We also observe that each behavior has its own button. This approach allows for the reuse and combination of the different behaviors. It may allow the server to adapt if needed, otherwise, the activation of any button can trigger all available interactions.</p>

<p>Using the usual request/response process of the browser also helps better manage errors. In case of a server error or network issue preventing page loading, for example, a clear message will be displayed to the client, where a default JavaScript interaction might simply fail silently.</p>

<p>Had we taken another approach, it might have seemed more natural to combine behaviors simultaneously, send requests to the server, and use a response in a format that could only be processed by the browser with JavaScript. Ultimately, the result would have been less robust, less reliable, and harder to maintain.</p>

<p>In conclusion, this example shows that we can easily use this approach to design complex interactions by adding very little JavaScript code in the browser. However, what we save on the client side, we spend on the server side.</p>

<p>Our form must indeed respond to multiple functional needs:</p>

<ul>
  <li>Differentiate between different actions (autocomplete, link display, final validation).</li>
  <li>When not definitively validating the form, re-display it while retaining user inputs without actually creating the associated object.</li>
  <li>When a product is selected, the page returned by the server must contain the link to copy and the configuration for activating the clipboard copy JavaScript behavior.</li>
</ul>

<p>Handling these additional behaviors indeed requires some server adaptations. But this is a manageable drawback:</p>

<ul>
  <li>The adaptations are actually simple to implement, with simple additions in the view code sufficing to transmit new data for the different interactions.</li>
  <li>Rehydrating the form with parameters received by the server preserves the input.</li>
  <li>It’s unnecessary to distinguish individual actions; differentiating final validation from a simple interaction request suffices. This approach generalizes easily, and the amount of code doesn’t increase with the number of interactive behaviors (all handled with a single controller modification).</li>
  <li>Another approach would also require server-side adaptations (e.g., an API to return the list or link to copy). Note that the adaptations required by progressive enhancement are more generic and thus easier to maintain.</li>
</ul>

<p>This approach isn’t dependent on the type of functionality and can be generalized to any type of interactive behavior. Additionally, the functionalities themselves are generic and can be reused in different contexts, combining to provide an optimal experience tailored to user environment quality.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Progressive enhancement, while not a new concept, remains relevant. It allows designing all needed functionalities using standard web technologies, progressively complemented with JavaScript to enrich user experience. Even though many services launch without considering degraded conditions users might experience, especially on mobile, progressive enhancement lets you reach a broader audience and offer a satisfactory user experience.</p>

<p>The benefits of this approach are numerous. By reducing the amount of JavaScript used, it leads to lighter, simpler, and easier-to-maintain code. Maintenance becomes easier, as the JavaScript code is also more general and reusable. This method also offers increased robustness, with user interactions being more reliable thanks to the use of standard request/response cycles of the browser, which also provide better default error handling.</p>

<p>Finally, while adopting progressive enhancement requires some server-side adjustments, these are simple and generic, promoting scalability and maintainability of the code. By integrating these principles, developers can design performant and accessible applications.</p>]]></content><author><name></name></author><category term="Rails" /><category term="Hotwire" /><category term="Stimulus" /><category term="Turbo" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Best Practices Guide for Simple and Clean Rails Forms</title><link href="/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails.html" rel="alternate" type="text/html" title="Best Practices Guide for Simple and Clean Rails Forms" /><published>2024-10-15T16:30:00+00:00</published><updated>2024-10-15T16:30:00+00:00</updated><id>/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails</id><content type="html" xml:base="/rails/actioncontroller/actionview/2024/10/15/les-bonnes-pratiques-avec-les-formulaires-rails.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>In Rails applications, <a href="https://guides.rubyonrails.org/action_controller_overview.html">controllers</a> and <a href="https://guides.rubyonrails.org/action_view_overview.html">views</a> can become complex when business logic or markup that could be avoided is added.</p>

<p>In this article, we will explore strategies to keep your form code readable, particularly by using Rails’ <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html">FormBuilders</a> and <a href="https://guides.rubyonrails.org/active_record_basics.html">ActiveRecord</a> <a href="https://guides.rubyonrails.org/association_basics.html">associations</a>.</p>

<h1 id="problem-statement">Problem Statement</h1>

<p>In most companies where I’ve worked, I’ve often seen overloaded controllers and views, and despite many efforts, this problem wasn’t completely avoided.</p>

<p>To me, an ideal controller should have actions that look like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">todo_params</span><span class="p">)</span>

    <span class="k">if</span> <span class="vi">@todo</span><span class="p">.</span><span class="nf">save</span>
      <span class="n">redirect_to</span> <span class="ss">action: :index</span><span class="p">,</span>
                  <span class="ss">flash: </span><span class="p">{</span> <span class="ss">notice: :successfully_saved</span> <span class="p">}</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="ss">:new</span><span class="p">,</span>
             <span class="ss">flash: </span><span class="p">{</span> <span class="ss">error: :could_not_be_saved</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>In this snippet, the action code is canonical and contains no business logic. The code is simple and immediately understandable.</p>

<p>However, the associated business logic is not necessarily obvious, but it will be implemented in the model and the display logic in the views.</p>

<p>Over time, successive developments will naturally tend to complicate the controller for various reasons:</p>

<ul>
  <li>They might require updating associated models, and for that, some developers might be tempted to add the configuration of these associations (by creating, for example, an empty object) in the controller to make the form display easier.</li>
  <li>You might want to enable a specific behavior that doesn’t directly translate to the model. To do this, you would add a parameter in the form independent of the model’s structure, detect its value in the controller, and execute certain logic.</li>
  <li>The increase in data quantity will lead to using filters (or scopes), making queries sometimes complex. These filters must sometimes be applied conditionally. If this logic is added to the controller, it can quickly degenerate.</li>
  <li>I’ve occasionally seen developers lacking mastery in a complex domain end up separately saving certain objects of the graph. I emphasize that this can lead to data inconsistencies. Generally, proper use of associations and nested forms can avoid this.</li>
  <li>The list goes on: I also think of sending emails or other notifications, actions non-compliant with the <a href="https://medium.com/podiihq/understanding-rails-routes-and-restful-design-a192d64cbbb5">REST</a> standard to manage autocomplete, etc.</li>
</ul>

<p>The view doesn’t escape complexity either. Adding interactive behaviors often requires integrating JavaScript code, for instance, via Stimulus controllers, whose configuration can clutter and complicate code readability. Using utility CSS classes or resorting to JSON data for server communication (instead of standard forms and Turbo) can also contribute to this complexity. Sometimes, it would be wiser to adapt the form structure and use Turbo. Other examples of complexity include redundant or similar code, as well as forms designed based on business requirements but without considering the existing data structure.</p>

<h1 id="solutions">Solutions</h1>

<p>It is actually relatively simple to solve these problems using the tools provided by Rails from the start. The solution lies in mastering a few essential Rails features:</p>

<ul>
  <li>FormBuilders</li>
  <li>Associations</li>
  <li><a href="https://guides.rubyonrails.org/action_view_helpers.html">Helpers</a></li>
  <li><a href="https://guides.rubyonrails.org/active_record_callbacks.html">Callbacks</a></li>
  <li><a href="https://codefol.io/posts/How-Does-Rack-Parse-Query-Params-With-parse-nested-query/">HTTP parameter management</a> in controllers and models.</li>
</ul>

<h3 id="rails-forms-for-managing-all-interactivity">Rails Forms for Managing All Interactivity</h3>

<p>Associations in Rails are extremely powerful. Some developers see forms as a bit complicated to handle, not very flexible. In reality, every interaction between the browser and the server can be executed with a form.</p>

<p>One of the barriers to using a form that I’ve observed is the notion of considering a form as merely a <a href="https://fr.wikipedia.org/wiki/CRUD#:~:text=L'acronyme%20informatique%20anglais%20CRUD,informations%20en%20base%20de%20donn%C3%A9es.">CRUD</a>. Essentially, the Rails <a href="https://guides.rubyonrails.org/command_line.html#bin-rails-generate">scaffold</a>, which means creating a form that mirrors the fields of a table and storing it in the database.</p>

<p>But by using forms to juggle with associations, you can model any interaction with the server. Adding Hotwire makes the user not even aware of dealing with forms, turning them into a simple technical detail.</p>

<p>Of course, I’m exaggerating a bit, in reality, you probably know <code class="language-plaintext highlighter-rouge">fields_for</code> for managing associations. <code class="language-plaintext highlighter-rouge">fields_for</code> is a Rails method that allows creating form fields for associated objects, thereby facilitating the management of complex model relationships. For example, <code class="language-plaintext highlighter-rouge">fields_for</code> can be used in an order editing form to input multiple associated items.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="sx">%= form_for @order do |f| %&gt;
  &lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:name</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= f.text_field :name %&gt;

  &lt;%=</span> <span class="n">f</span><span class="p">.</span><span class="nf">fields_for</span> <span class="ss">:items</span> <span class="k">do</span> <span class="o">|</span><span class="n">fi</span><span class="o">|</span> <span class="sx">%&gt;
    &lt;%= fi.label :name %&gt;</span>
    <span class="o">&lt;</span><span class="sx">%= fi.text_field :name %&gt;

    &lt;%=</span> <span class="n">fi</span><span class="p">.</span><span class="nf">label</span> <span class="ss">:quantity</span> <span class="o">%&gt;</span>
    <span class="o">&lt;</span><span class="sx">%= fi.number_field :quantity %&gt;

    &lt;%# Updating existing objects %&gt;
    &lt;%=</span> <span class="n">fi</span><span class="p">.</span><span class="nf">hidden_field</span> <span class="ss">:id</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>

  <span class="o">&lt;</span><span class="sx">%= f.submit %&gt;
&lt;% end %&gt;
</span></code></pre></div></div>

<h3 id="the-complexity-of-fields_for">The Complexity of <code class="language-plaintext highlighter-rouge">fields_for</code></h3>

<p>Using <code class="language-plaintext highlighter-rouge">fields_for</code> may seem a bit cumbersome in a form at first as there are several cases to consider:</p>

<ul>
  <li>Displaying and updating objects already stored in the database.</li>
  <li>The possibility of creating one or more new objects.</li>
</ul>

<p>ActiveRecord allows this to be almost transparent, but managing a persisted object and one that isn’t yet is not the same thing. Even though Rails is powerful, developers must always keep certain subtleties in mind to avoid getting tangled up, sometimes even giving up and tweaking the controller to get it to work.</p>

<p>Some of these subtleties can really ruin your life if you miss them, you probably know some. I think in particular of forgetting the hidden field to update an association. Be careful in this case to properly filter updated objects for security, for this in the model, use <code class="language-plaintext highlighter-rouge">reject_if</code> to ensure the updated objects are part of the existing association or not yet in the database. Another one is forgetting to configure <code class="language-plaintext highlighter-rouge">accepts_nested_attributes_for</code> in the model.</p>

<p>There are more, and confusion grows when they multiply.</p>

<h3 id="managing-associations-with-checkboxes-and-_destroy-without-complicating-the-controller">Managing Associations with Checkboxes and _destroy without Complicating the Controller</h3>

<p>Once you have your form with an object and its associations, you can already handle many more cases.</p>

<p>But it becomes even more interesting when you break the equivalence between data storage and the form.</p>

<p>For example, if you have an online sales application (Let’s take a <code class="language-plaintext highlighter-rouge">Order</code> model with a <code class="language-plaintext highlighter-rouge">has_many :services</code> association). When ordering, you simply want to choose the services you’re interested in by activating or deactivating them with a checkbox (or a toggle).</p>

<p>A naive approach might involve adding additional attributes in the form, then retrieving the parameters on the controller side and creating/deleting the corresponding services.</p>

<p>To avoid putting this code in the controller, you can create the corresponding accessors in the model (or in a <a href="https://jetthoughts.com/blog/cleaning-up-your-rails-views-with-view-objects-development/">View Object</a> since it’s view logic and not business logic). It would be cleaner and work just as well.</p>

<p>This approach obviously works, but it entails writing quite a bit of plumbing logic that doesn’t really have business value.</p>

<p>Using the <code class="language-plaintext highlighter-rouge">_destroy</code> attribute on the association solves these problems. There is still some logic to initialize all services available for the order with the right parameters, then <code class="language-plaintext highlighter-rouge">_destroy</code> needs to be set to true to not activate the service by default (opt-in), and not set to activate a service by default (opt-out). This can be done on the model side with an <code class="language-plaintext highlighter-rouge">after_initialize</code> callback, probably conditionally in this way <code class="language-plaintext highlighter-rouge">Order.new(build_services: true)</code>. <code class="language-plaintext highlighter-rouge">build_services</code> being an <code class="language-plaintext highlighter-rouge">attr_accessor</code> that indicates whether to activate the callback.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">has_many</span> <span class="ss">:services</span>

  <span class="n">accepts_nested_attributes_for</span> <span class="p">\</span>
    <span class="ss">:services</span><span class="p">,</span>
    <span class="ss">allow_destroy: </span><span class="kp">true</span>
    <span class="ss">reject_if: :belongs_to_foreign_record?</span>

  <span class="nb">attr_accessor</span> <span class="ss">:build_services</span>
  <span class="n">after_initialize</span> <span class="ss">:build_services_records</span><span class="p">,</span> <span class="ss">if: :build_services</span>

  <span class="k">def</span> <span class="nf">build_services_records</span>
    <span class="no">Service</span><span class="o">::</span><span class="no">KINDS</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">kind</span><span class="o">|</span> <span class="n">services</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">kind</span><span class="p">:)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">belongs_to_foreign_record?</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
    <span class="n">attributes</span><span class="p">[</span><span class="s1">'id'</span><span class="p">].</span><span class="nf">present?</span> <span class="o">&amp;&amp;</span>
      <span class="n">services</span><span class="p">.</span><span class="nf">ids</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="n">attributes</span><span class="p">[</span><span class="s1">'id'</span><span class="p">].</span><span class="nf">to_i</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The controller is a bit less canonical, but it’s fine. Even if a parameter is specified, this approach prevents the controller from having knowledge of the model’s implementation details (if strong_parameters is missed).</p>

<p>On the view side, one can handle it with a <code class="language-plaintext highlighter-rouge">f.fields_for :services</code>. And the checkbox corresponding to <code class="language-plaintext highlighter-rouge">_destroy</code> is displayed but inverted with some CSS (when <code class="language-plaintext highlighter-rouge">_destroy</code> is true, the box will be unchecked and vice versa).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="sx">%= f.fields_for :services do |fs| %&gt;
  &lt;%=</span> <span class="n">fs</span><span class="p">.</span><span class="nf">hidden_field</span> <span class="ss">:id</span> <span class="o">%&gt;</span>
  <span class="o">&lt;</span><span class="sx">%= fs.check_box :_destroy %&gt;
&lt;% end %&gt;
</span></code></pre></div></div>

<p>When the controller sends form parameters to the model, associations with <code class="language-plaintext highlighter-rouge">_destroy</code> set to true are deleted. So only the activated services will be associated with the order.</p>

<p>This was just to show an example of what can be done by bending Rails logic a bit.</p>

<p>It may seem somewhat trivial, but this kind of approach helps limit superfluous code (bloat). It allows for implementing complex features while keeping relatively simple, understandable code. Even though the logic may appear a bit convoluted, since these patterns can be applied in different situations, the application can grow while maintaining accessible code even without having been modified for a long time.</p>

<p>In our application, we use this approach to configure the services associated with an order. This allowed us to remove a lot of code in the view and simplify our controllers.</p>

<h3 id="eliminating-redundancies-with-a-custom-formbuilder">Eliminating Redundancies with a Custom FormBuilder</h3>

<p>ActiveAdmin uses <code class="language-plaintext highlighter-rouge">formtastic</code> to generate forms. You know, it’s the slightly quirky but very concise syntax that allows creating forms in ActiveAdmin, and you may have struggled with it if you’ve needed to customize them.</p>

<p>You may also know <code class="language-plaintext highlighter-rouge">simple_form</code>, which is another form builder.</p>

<p>But in reality, having your own form builder in your application will allow for cleaner views.</p>

<p>The advantage is that rather than adapting to the choices made by the form builder’s creator and possibly ending up fighting with them, you can tailor it to suit your application’s needs, and it’s not really that complicated to do.</p>

<p>Often, you have a generic way of writing your forms, applying a similar layout or style to nearly all your forms (or at least juggling with a few different styles).</p>

<p>For example, you use a label, then your field, encapsulated in a div, possibly with some CSS classes (whether you’re a fan of Tailwind or prefer the semantic HTML/CSS approach).</p>

<p>The default Rails helpers replicate HTML fields by hydrating them with ActiveRecord. So if you only rely on Rails helpers, your views will be verbose and repetitive. Consistently, you’ll have a div and its classes, with the label and field inside.</p>

<p>In your FormBuilder, you can override Rails helpers (or create others alongside) so they generate everything at once. Your views become much cleaner. If you need to make a different version, you can always add another helper or add extra options to your helper.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">ApplicationFormHelper</span>
  <span class="k">def</span> <span class="nf">semantic_form_with</span><span class="p">(</span><span class="ss">model: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">scope: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">url: </span><span class="kp">nil</span><span class="p">,</span> <span class="ss">format: </span><span class="kp">nil</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="n">merged_options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">builder: </span><span class="no">ApplicationFormBuilder</span> <span class="p">}.</span><span class="nf">merge</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
    <span class="n">form_with</span><span class="p">(</span><span class="n">model</span><span class="p">:,</span> <span class="n">scope</span><span class="p">:,</span> <span class="n">url</span><span class="p">:,</span> <span class="nb">format</span><span class="p">:,</span> <span class="o">**</span><span class="n">merged_options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ApplicationFormBuilder</span> <span class="o">&lt;</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">FormBuilder</span>
  <span class="k">def</span> <span class="nf">text_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="n">_wrapped_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="k">super</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
    <span class="n">_wrapped_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">object</span><span class="p">.</span><span class="nf">public_send</span><span class="p">(</span><span class="nb">method</span><span class="p">))</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">_wrapped_field</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="vi">@template</span><span class="p">.</span><span class="nf">content_tag</span><span class="p">(</span><span class="ss">:p</span><span class="p">)</span> <span class="k">do</span>
      <span class="vi">@template</span><span class="p">.</span><span class="nf">safe_join</span> <span class="p">[</span><span class="n">label</span><span class="p">(</span><span class="nb">method</span><span class="p">),</span> <span class="n">value</span><span class="p">]</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Next comes the issue of your Stimulus controllers. The Stimulus syntax can be particularly verbose, and while it’s relatively easy to write, reading it sometimes becomes quite indigestible.</p>

<p>For instance, if you want to dynamically add/remove an object in an association, you might wish to use <code class="language-plaintext highlighter-rouge">nested-form</code> from <a href="https://www.stimulus-components.com">Stimulus Components</a>. The syntax is relatively straightforward but could be simplified:</p>

<ul>
  <li>Data attributes must be added on the form tag to enable the functionality.</li>
  <li>Configuring the template involves many tags.</li>
</ul>

<p>By adding a helper (which could be used with <code class="language-plaintext highlighter-rouge">f.has_many :items</code>, for instance), you can:</p>

<ul>
  <li>Automatically create a <code class="language-plaintext highlighter-rouge">fieldset</code> with a default legend.</li>
  <li>Automatically call <code class="language-plaintext highlighter-rouge">fields_for</code> with the correct parameters.</li>
  <li>Configure the Stimulus controller.</li>
  <li>Add the add/remove buttons in the right place so the caller can simply define the fields to display.</li>
</ul>

<p>You can, of course, apply this logic of creating helpers with all Stimulus controllers in your application (whether they’re in forms or not), so your views should gain in readability.</p>

<h3 id="associations-in-activerecord">Associations in ActiveRecord</h3>

<p>A key to avoiding headaches when creating forms in Rails is understanding and mastering several concepts:</p>

<ul>
  <li>The parameter format in Rack (how parameters are passed as a hash of options).</li>
  <li>How associations are handled in persisted and non-persisted mode. Rails is, indeed, capable of navigating an association graph whether they are persisted or not. But there are differences between the two. The magic of Rails has its limits.</li>
  <li>Understanding the database transaction system is important. The key lies in one simple rule: one controller action = one save. It is crucial to grasp that a save in Rails allows saving an entire object graph in a transaction. You don’t need to manage the transaction manually with a block or anything; all it takes is to build your form so that it contains all the objects to save via the associations.</li>
</ul>

<h2 id="persistence-of-associations-in-activerecord">Persistence of Associations in ActiveRecord</h2>

<p>To understand how a form should be written to function as desired, I usually start by taking a tour in the Rails console.</p>

<p>Create a new object with the parameters expected in the form, navigate the graph, save, and if everything works as expected, replicate the structure used in a form.</p>

<p>When making more complex associations, with scopes, for instance, or <a href="https://edgeguides.rubyonrails.org/association_basics.html#polymorphic-associations">polymorphic associations</a>, you may occasionally have <a href="https://stackoverflow.com/questions/35104876/why-are-polymorphic-associations-not-supported-by-inverse-of">surprises</a>.</p>

<p>Usually, this doesn’t pose a problem in practice, but occasionally, you may have to configure manually.</p>

<p>Keep your associations as simple as possible because certain combinations may not work correctly in Rails.</p>

<p>In the case below, you can see that the association configuration doesn’t allow the inverse to be retrieved when the association isn’t yet persisted. This can be easily understood since the scope is a DB query and, therefore, not executed for a non-persisted association.</p>

<p>If you already have a <code class="language-plaintext highlighter-rouge">has_many :items</code> and want to add <code class="language-plaintext highlighter-rouge">has_one :special_item, -&gt; { where(kind: :special) }</code> from the same class as items, the association won’t work correctly for non-persisted associations. This can sometimes cause issues in certain use cases.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a new todo with an item and a special item</span>
<span class="o">&gt;</span>  <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
     <span class="ss">items_attributes: </span><span class="p">[{}],</span>
     <span class="ss">special_item_attributes: </span><span class="p">{}</span>
   <span class="p">)</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Todo id: nil, name: nil&gt;</span>

<span class="c1"># The item is well-linked to the todo via the inverse association</span>
<span class="o">&gt;</span>  <span class="n">todo</span><span class="p">.</span><span class="nf">items</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">todo</span>
<span class="o">=&gt;</span> <span class="c1">#&lt;Todo id: nil, name: nil&gt;</span>

<span class="c1"># But not the special item</span>
<span class="o">&gt;</span>  <span class="n">todo</span><span class="p">.</span><span class="nf">special_item</span><span class="p">.</span><span class="nf">todo</span>
<span class="o">=&gt;</span> <span class="kp">nil</span>
</code></pre></div></div>

<p>When ActiveRecord behavior doesn’t function as expected, it’s worth checking the code managing the association to understand the issue’s origin.</p>

<p>In these cases, I use <a href="https://ruby-doc.org/core-2.4.6/Method.html#method-i-source_location">source_location</a> to find easily the code used during the association call. This method returns the source file and the line number where the method is defined. For example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">method</span><span class="p">(</span><span class="ss">:has_many</span><span class="p">).</span><span class="nf">source_location</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"gems/activerecord-7.2.1.1/lib/active_record/associations.rb"</span><span class="p">,</span> <span class="mi">1268</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="no">Todo</span><span class="p">.</span><span class="nf">instance_method</span><span class="p">(</span><span class="ss">:items</span><span class="p">).</span><span class="nf">source_location</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"gems/activerecord-7.2.1.1/lib/active_record/associations/builder/association.rb"</span><span class="p">,</span> <span class="mi">103</span><span class="p">]</span>
</code></pre></div></div>

<p>Understanding implementation details allows creating functions integrated with ActiveRecord. This enables adding your own magic to your app and having functions that seem like they belong to Rails.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Rails applications can be complex, and the pragmatic approach of the framework sometimes leads to problems in code organization. Using the techniques outlined in this article, you can maintain very simple and clear views and controllers. This issue also exists for managing model complexity, but we will tackle this topic in a future article.</p>]]></content><author><name></name></author><category term="Rails" /><category term="ActionController" /><category term="ActionView" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Asynchronous Exports in ActiveAdmin</title><link href="/rails/activeadmin/2024/04/25/exports-csv-asynchrones-activeadmin.html" rel="alternate" type="text/html" title="Asynchronous Exports in ActiveAdmin" /><published>2024-04-25T19:37:00+00:00</published><updated>2024-04-25T19:37:00+00:00</updated><id>/rails/activeadmin/2024/04/25/exports-csv-asynchrones-activeadmin</id><content type="html" xml:base="/rails/activeadmin/2024/04/25/exports-csv-asynchrones-activeadmin.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Data export is a feature present in most enterprise applications. ActiveAdmin offers an export feature by default, which functions synchronously, meaning the generation of data occurs at the client’s request.</p>

<h1 id="the-problem-with-synchronous-exports">The Problem with Synchronous Exports</h1>

<p>However, when the volume of data to be exported is significant, the process can take time. The server, being occupied, is not available to handle requests that pile up, leading to a bottleneck. Performance degrades, and users notice that the application is slow.</p>

<p>If the situation worsens, the backlog becomes too substantial, and the server is no longer able to process requests promptly. The application then starts returning errors. If the situation continues to deteriorate, the application ceases to function entirely and becomes inaccessible.</p>

<h1 id="implementing-an-asynchronous-solution">Implementing an Asynchronous Solution</h1>

<p>Faced with this type of problem, we used the gem <a href="https://github.com/rootstrap/activeadmin-async_exporter"><code class="language-plaintext highlighter-rouge">activeadmin-async_exporter</code></a> to address it. This library allows for asynchronous data exports in ActiveAdmin with ActiveJob. However, we had to make adaptations to use this solution.</p>

<p>Firstly, the gem <code class="language-plaintext highlighter-rouge">activeadmin-async_exporter</code> is no longer maintained by its author and was not compatible with our version of Rails. Therefore, we had to modify it and update its dependencies.</p>

<p>We made some additional adaptations to handle parameters with strong_parameters and resolve a missing method issue due to our application’s use of <code class="language-plaintext highlighter-rouge">current_user</code> while the gem author uses <code class="language-plaintext highlighter-rouge">current_admin_user</code>.</p>

<p>Unlike our application, the gem does not use ActiveStorage for attachments. We also adapted this part accordingly.</p>

<p>To record the request, the gem provides a generator for the migration to create the necessary tables in the database. The gem also provides an ActiveAdmin generator for the interface to manage exports. However, these generators are undocumented.</p>

<p>We eventually incorporated the code of the gem directly into our application and customised it according to our needs.</p>

<h1 id="publishing-in-a-gem">Publishing in a Gem</h1>

<p>We decided not to publish our modifications as a new gem since the code is integrated into our application, and it would require a new effort for adaptation. Furthermore, given the little activity on this library, I am not convinced this solution necessarily meets a community need, though it proved very useful in improving our application’s performance.</p>

<p>Nevertheless, if you are interested in these modifications, have questions or comments, do not hesitate to contact me for further information.</p>

<h1 id="conclusion">Conclusion</h1>

<p>This anecdote illustrates, through a concrete example, the type of problem that can arise during the evolution of an application. The solution based on the use and adaptation of an unpopular and unmaintained gem may seem atypical, but this approach actually follows a very classic process of resolving a technical issue.</p>]]></content><author><name></name></author><category term="Rails" /><category term="ActiveAdmin" /><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>